jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "it.designfuture.flatpickr.library-preload",
	"modules": {
		"it/designfuture/flatpickr/FlatDatePicker.js": "/*!\r\n * ${copyright}\r\n */\r\n\r\n// Provides control it.designfuture.flatpickr.FlatDatePicker\r\nsap.ui.define([\r\n\t\t'jquery.sap.global',\r\n\t\t'sap/m/InputBase',\r\n\t\t'./flatpickr',\r\n\t\t'./library'\r\n\t], function(jQuery, InputBase, flatpickr, library) {\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Constructor for a new FlatDatePicker.\r\n\t *\r\n\t * @param {string} [sId] id for the new control, generated automatically if no id is given \r\n\t * @param {object} [mSettings] initial settings for the new control\r\n\t *\r\n\t * @class\r\n\t * FlatDatePicker TODO ADD HERE A DESCRIPTION\r\n\t * @extends sap.m.InputBase\r\n\t * @version ${version}\r\n\t *\r\n\t * @constructor\r\n\t * @public\r\n\t * @since 1.40\r\n\t * @name it.designfuture.flatpickr.FlatDatePicker\r\n\t */\r\n\r\n\tvar FlatDatePicker = InputBase.extend(\"it.designfuture.flatpickr.FlatDatePicker\", /** @lends it.designfuture.flatpickr.FlatDatePicker prototype */ { \r\n\t\t\r\n\t\t__flatPickr: undefined,\r\n\t\t\r\n\t\tmetadata : {\r\n\t\t\tlibrary: 'it.designfuture.flatpickr',\r\n\t\t\tproperties : {\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Exactly the same as date format, but for the altInput field\r\n\t\t\t\t */\r\n\t\t\t\taltFormat : {type : \"string\", group : \"Appearance\", defaultValue : \"F j, Y\"},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Show the user a readable date (as per altFormat), but return something totally different to the server.\r\n\t\t\t\t */\r\n\t\t\t\taltInput : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * This class will be added to the input element created by the altInput option.  \r\n\t\t\t\t * Note that altInput already inherits classes from the original input.\r\n\t\t\t\t */\r\n\t\t\t\taltInputClass : {type : \"string\", group : \"Appearance\", defaultValue : \"\"},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\r\n\t\t\t\t */\r\n\t\t\t\tallowInput : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\r\n\t\t\t\t */\r\n\t\t\t\t//appendTo : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Whether clicking on the input should open the picker. \r\n\t\t\t\t * You could disable this if you wish to open the calendar manually with.open()\r\n\t\t\t\t */\r\n\t\t\t\tclickOpens : {type : \"boolean\", group : \"Appearance\", defaultValue : true},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * A string of characters which are used to define how the date will be displayed in the input box. \r\n\t\t\t\t * The supported characters are defined in the table below.\r\n\t\t\t\t */\r\n\t\t\t\tdateFormat : {type : \"string\", group : \"Appearance\", defaultValue : \"Y-m-d\"},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Set the initial selected date. \r\n\t\t\t\t * Same as preloading a date string into an input's value attribute, but can also handle a Date object.\r\n\t\t\t\t */\r\n\t\t\t\tdateValue : {type : \"object\", group : \"Appearance\", defaultValue : null, bindable: \"bindable\"},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Set disableMobile to true to always use the non-native picker.\r\n\t\t\t\t * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\r\n\t\t\t\t */\r\n\t\t\t\tdisableMobile : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Enables time picker\r\n\t\t\t\t */\r\n\t\t\t\tenableTime : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Enables seconds in the time picker.\r\n\t\t\t\t */\r\n\t\t\t\tenableSeconds : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Adjusts the step for the hour input (incl. scrolling)\r\n\t\t\t\t */\r\n\t\t\t\thourIncrement : {type : \"int\", group : \"Appearance\", defaultValue : 1},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Displays the calendar inline\r\n\t\t\t\t */\r\n\t\t\t\tinline : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The maximum date that a user can pick to (inclusive).\r\n\t\t\t\t */\r\n\t\t\t\tmaxDate : {type : \"object\", group : \"Appearance\", defaultValue : null},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The minimum date that a user can start picking from (inclusive).\r\n\t\t\t\t */\r\n\t\t\t\tminDate : {type : \"object\", group : \"Appearance\", defaultValue : null},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Adjusts the step for the minute input (incl. scrolling)\r\n\t\t\t\t */\r\n\t\t\t\tminuteIncrement : {type : \"int\", group : \"Appearance\", defaultValue : 5},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * \"single\", \"multiple\", or \"range\"\r\n\t\t\t\t */\r\n\t\t\t\tmode : {type : \"string\", group : \"Appearance\", defaultValue : \"single\"},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Hides the day selection in calendar. \r\n\t\t\t\t * Use it along with enableTime to create a time picker.\r\n\t\t\t\t */\r\n\t\t\t\tnoCalendar : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * \tShow the month using the shorthand version (ie, Sep instead of September).\r\n\t\t\t\t */\r\n\t\t\t\tshorthandCurrentMonth : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Position the calendar inside the wrapper and next to the input element. \r\n\t\t\t\t * (Leave false unless you know what you're doing.)\r\n\t\t\t\t */\r\n\t\t\t\tstatic : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Displays time picker in 24 hour mode without AM/PM selection when enabled.\r\n\t\t\t\t */\r\n\t\t\t\ttime_24hr : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * When true, dates will parsed, formatted, and displayed in UTC. \r\n\t\t\t\t * It's recommended that date strings contain the timezone, but not necessary.\r\n\t\t\t\t */\r\n\t\t\t\tutc : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Enables display of week numbers in calendar.\r\n\t\t\t\t */\r\n\t\t\t\tweekNumbers : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\r\n\t\t\t},\r\n\t\t\taggregations: {},\r\n\t\t\tevents: {\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * onChange gets triggered when the user selects a date, or changes the time on a selected date\r\n\t\t\t\t */\r\n\t\t\t\tonChange: {\r\n\t\t\t\t\tparameters: {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * An array of Date objects selected by the user. When there are no dates selected, the array is empty.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tselectedDates: { type: \"object[]\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * String representation of the latest selected Date object by the user. The string is formatted as per the dateFormat option\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tdateStr: { type: \"string\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * The Flatpickr object, containing various methods and properties\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tinstance: { type: \"object\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * onOpen gets triggered when the calendar is opened\r\n\t\t\t\t */\r\n\t\t\t\tonOpen: {\r\n\t\t\t\t\tparameters: {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * An array of Date objects selected by the user. When there are no dates selected, the array is empty.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tselectedDates: { type: \"object[]\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * String representation of the latest selected Date object by the user. The string is formatted as per the dateFormat option\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tdateStr: { type: \"string\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * The Flatpickr object, containing various methods and properties\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tinstance: { type: \"object\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * onClose gets triggered when the calendar is closed\r\n\t\t\t\t */\r\n\t\t\t\tonClose: {\r\n\t\t\t\t\tparameters: {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * An array of Date objects selected by the user. When there are no dates selected, the array is empty.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tselectedDates: { type: \"object[]\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * String representation of the latest selected Date object by the user. The string is formatted as per the dateFormat option\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tdateStr: { type: \"string\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * The Flatpickr object, containing various methods and properties\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tinstance: { type: \"object\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * onMonthChange gets triggered when the month is changed, either by the user or programmatically\r\n\t\t\t\t */\r\n\t\t\t\tonMonthChange: {\r\n\t\t\t\t\tparameters: {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * An array of Date objects selected by the user. When there are no dates selected, the array is empty.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tselectedDates: { type: \"object[]\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * String representation of the latest selected Date object by the user. The string is formatted as per the dateFormat option\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tdateStr: { type: \"string\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * The Flatpickr object, containing various methods and properties\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tinstance: { type: \"object\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * onMonthChange gets triggered when the year is changed, either by the user or programmatically\r\n\t\t\t\t */\r\n\t\t\t\tonYearChange: {\r\n\t\t\t\t\tparameters: {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * An array of Date objects selected by the user. When there are no dates selected, the array is empty.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tselectedDates: { type: \"object[]\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * String representation of the latest selected Date object by the user. The string is formatted as per the dateFormat option\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tdateStr: { type: \"string\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * The Flatpickr object, containing various methods and properties\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tinstance: { type: \"object\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * onReady gets triggered once the calendar is in a ready state.\r\n\t\t\t\t */\r\n\t\t\t\tonReady: {\r\n\t\t\t\t\tparameters: {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * An array of Date objects selected by the user. When there are no dates selected, the array is empty.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tselectedDates: { type: \"object[]\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * String representation of the latest selected Date object by the user. The string is formatted as per the dateFormat option\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tdateStr: { type: \"string\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * The Flatpickr object, containing various methods and properties\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tinstance: { type: \"object\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * onValueUpdate gets triggered when the input value is updated with a new date string\r\n\t\t\t\t */\r\n\t\t\t\tonValueUpdate: {\r\n\t\t\t\t\tparameters: {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * An array of Date objects selected by the user. When there are no dates selected, the array is empty.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tselectedDates: { type: \"object[]\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * String representation of the latest selected Date object by the user. The string is formatted as per the dateFormat option\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tdateStr: { type: \"string\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * The Flatpickr object, containing various methods and properties\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tinstance: { type: \"object\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Take full control of every date cell with the onDayCreate() hook\r\n\t\t\t\t */\r\n\t\t\t\tonDayCreate: {\r\n\t\t\t\t\tparameters: {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * An array of Date objects selected by the user. When there are no dates selected, the array is empty.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tselectedDates: { type: \"object[]\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * String representation of the latest selected Date object by the user. The string is formatted as per the dateFormat option\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tdateStr: { type: \"string\" },\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * The Flatpickr object, containing various methods and properties\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tinstance: { type: \"object\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}, \r\n\t\t\r\n\t\tinit: function() {\r\n\t\t\t//\tInit all the things!\r\n\t\t},\r\n\t\t\r\n\t\tonAfterRendering: function() {\r\n\t\t\tvar that = this;\r\n\t\t\tthis.__flatPickr = new Flatpickr($(\"#\"+this.getId()+\".flatpickrCustomControl\")[0], {\r\n\t\t\t    altFormat: this.getAltFormat(),\r\n\t\t\t    altInput: this.getAltInput(),\r\n\t\t\t    altInputClass: this.getAltInputClass(),\r\n\t\t\t    allowInput: this.getAllowInput(),\r\n\t\t\t    clickOpens: this.getClickOpens(),\r\n\t\t\t    dateFormat: this.getDateFormat(),\r\n\t\t\t    defaultDate: this.getDateValue(),\r\n\t\t\t    disableMobile: this.getDisableMobile(),\r\n\t\t\t    enableTime: this.getEnableTime(),\r\n\t\t\t    enableSeconds: this.getEnableSeconds(),\r\n\t\t\t    hourIncrement: this.getHourIncrement(),\r\n\t\t\t    inline: this.getInline(),\r\n\t\t\t    maxDate: this.getMaxDate(),\r\n\t\t\t    minDate: this.getMinDate(),\r\n\t\t\t    minuteIncrement: this.getMinuteIncrement(),\r\n\t\t\t    mode: this.getMode(),\r\n\t\t\t    noCalendar: this.getNoCalendar(),\r\n\t\t\t    shorthandCurrentMonth: this.getShorthandCurrentMonth(),\r\n\t\t\t    static: this.getStatic(),\r\n\t\t\t    time_24hr: this.getTime_24hr(),\r\n\t\t\t    utc: this.getUtc(),\r\n\t\t\t    weekNumbers: this.getWeekNumbers(),\r\n\t\t\t    wrap: true, // force wrap to true\r\n\t\t\t    \r\n\t\t\t    // defining events callback\r\n\t\t\t    onChange: function(selectedDates, dateStr, instance) {\r\n\t\t\t\t\tthat.setProperty(\"dateValue\", selectedDates, true);\r\n\t\t\t\t\tthat.fireOnChange({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t\t\t},\r\n\t\t\t    onOpen: function(selectedDates, dateStr, instance) {\r\n\t\t\t\t\tthat.fireOnOpen({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t\t\t},\r\n\t\t\t    onClose: function(selectedDates, dateStr, instance) {\r\n\t\t\t\t\tthat.fireOnClose({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t\t\t},\r\n\t\t\t    onMonthChange: function(selectedDates, dateStr, instance) {\r\n\t\t\t\t\tthat.fireOnMonthChange({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t\t\t},\r\n\t\t\t    onYearChange: function(selectedDates, dateStr, instance) {\r\n\t\t\t\t\tthat.fireOnYearChange({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t\t\t},\r\n\t\t\t    onReady: function(selectedDates, dateStr, instance) {\r\n\t\t\t\t\tthat.fireOnReady({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t\t\t},\r\n\t\t\t    onValueUpdate: function(selectedDates, dateStr, instance) {\r\n\t\t\t\t\tthat.fireOnValueUpdate({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t\t\t},\r\n\t\t\t    onDayCreate: function(selectedDates, dateStr, instance) {\r\n\t\t\t\t\tthat.fireOnDayCreate({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t////////////////////////////////////////////////////\r\n\t\t//\tFASTPICKR METHODS\r\n\t\t////////////////////////////////////////////////////\r\n\t\t\r\n\t\t/*\r\n\t\t* Resets the selected dates (if any) and clears the input.\r\n\t\t* @public\r\n\t\t*/\r\n\t\tclear: function() {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.clear();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t* Closes the calendar.\r\n\t\t* @public\r\n\t\t*/\r\n\t\tclose: function() {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.close();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t* Destroys the Flatpickr instance, cleans up - removes event listeners, restores inputs, etc.\r\n\t\t* @public\r\n\t\t*/\r\n\t\tdestroy: function() {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.destroy();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t* Return a formatted date\r\n\t\t* @public\r\n\t\t* @param {string} formatStr Formatting tokens string\r\n\t\t* @param {string} dateObj Date to be formatted\r\n\t\t* @returns {string} A string representation of dateObj,  formatted as per formatStr\r\n\t\t*/\r\n\t\tformatDate: function(formatStr, dateObj) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\treturn this.__flatPickr.formatDate(formatStr, dateObj);\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t\r\n\t\t\r\n\t\t/*\r\n\t\t* Sets the calendar view to the year and month ofdate, which can be a date string, a Date, or nothing\r\n\t\t* If date is undefined, the view is set to the latest selected date, the minDate, or today’s date\r\n\t\t* @public\r\n\t\t* @param {Date} date Date to jump to\r\n\t\t*/\r\n\t\tjumpToDate: function(date) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.jumpToDate(date);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t* Shows/opens the calendar.\r\n\t\t* @public\r\n\t\t*/\r\n\t\topen: function() {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.open();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t* Parses a date string or a timestamp, and returns a Date.\r\n\t\t* @public\r\n\t\t* @param {object} date String or timestamp to be parsed\r\n\t\t* @returns {Date} Parsed date\r\n\t\t*/\r\n\t\tparseDate: function(date) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.parseDate();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t* Redraws the calendar. Shouldn’t be necessary in most cases\r\n\t\t* @public\r\n\t\t*/\r\n\t\tredraw: function() {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.redraw();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t* Sets the current selected date(s) todate, which can be a date string, a Date, or an Array of the Dates.\r\n\t\t* Optionally, pass true as the second argument to force any onChange events to fire\r\n\t\t* @public\r\n\t\t* @param {object} string, Date or an Array of the Dates\r\n\t\t* @param {boolean} triggerChange If true will force any onChange events to fire\r\n\t\t*/\r\n\t\tsetDate: function(date, triggerChange) {\r\n\t\t\tthis.__flatPickr.setDate(date, triggerChange);\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t* Shows/opens the calendar if its closed, hides/closes it otherwise\r\n\t\t* @public\r\n\t\t*/\r\n\t\ttoggle: function() {\r\n\t\t\tthis.__flatPickr.toggle();\r\n\t\t},\r\n\t\t\r\n\t\t////////////////////////////////////////////////////\r\n\t\t//\tEVENTS HANDLING\r\n\t\t////////////////////////////////////////////////////\r\n\t\t\r\n\t\tonChange: function(selectedDates, dateStr, instance) {\r\n\t\t\tthis.fireOnChange({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t},\r\n\t\t\r\n\t\tonOpen: function(selectedDates, dateStr, instance) {\r\n\t\t\tthis.fireOnOpen({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t},\r\n\t\t\r\n\t\tonClose: function(selectedDates, dateStr, instance) {\r\n\t\t\tthis.fireOnClose({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t},\r\n\t\t\r\n\t\tonMonthChange: function(selectedDates, dateStr, instance) {\r\n\t\t\tthis.fireOnMonthChange({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t},\r\n\t\t\r\n\t\tonYearChange: function(selectedDates, dateStr, instance) {\r\n\t\t\tthis.fireOnYearChange({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t},\r\n\t\t\r\n\t\tonReady: function(selectedDates, dateStr, instance) {\r\n\t\t\tthis.fireOnReady({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t},\r\n\t\t\r\n\t\tonValueUpdate: function(selectedDates, dateStr, instance) {\r\n\t\t\tthis.fireOnValueUpdate({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t},\r\n\t\t\r\n\t\tonDayCreate: function(selectedDates, dateStr, instance) {\r\n\t\t\tthis.fireOnDayCreate({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t},\r\n\t\t\r\n\t\t////////////////////////////////////////////////////\r\n\t\t//\tGETTER & SETTER FOR FLAT PICKER PROPERTIES\r\n\t\t////////////////////////////////////////////////////\r\n\r\n\t\tgetSelectedDates: function() {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\treturn this.__flatPickr.selectedDates;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t\r\n\t\tsetAltFormat: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"altFormat\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"altFormat\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetAltInput: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"altInput\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"altInput\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetAltInputClass: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"altInputClass\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"altInputClass\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetAllowInput: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"allowInput\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"allowInput\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetClickOpens: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"clickOpens\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"clickOpens\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetDateFormat: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"dateFormat\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"dateFormat\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetDateValue: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"defaultDate\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"dateValue\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetDisableMobile: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"disableMobile\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"disableMobile\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetEnableTime: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"enableTime\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"enableTime\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetEnableSeconds: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"enableSeconds\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"enableSeconds\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetHourIncrement: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"hourIncrement\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"hourIncrement\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetInline: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"inline\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"inline\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetMaxDate: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"maxDate\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"maxDate\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetMinDate: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"minDate\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"minDate\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetMinuteIncrement: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"minuteIncrement\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"minuteIncrement\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetMode: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"mode\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"mode\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetNoCalendar: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"noCalendar\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"noCalendar\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetShorthandCurrentMonth: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"shorthandCurrentMonth\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"shorthandCurrentMonth\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetStatic: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"static\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"static\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetTime_24hr: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"time_24hr\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"time_24hr\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetUtc: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"utc\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"utc\", value, false);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetWeekNumbers: function(value) {\r\n\t\t\tif( this.__flatPickr ) {\r\n\t\t\t\tthis.__flatPickr.set(\"weekNumbers\", value);\r\n\t\t\t}\r\n\t\t\tthis.setProperty(\"weekNumbers\", value, false);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t});\r\n\t\r\n\t/*\r\n\t* Override the exit method to free local resources and destroy \r\n\t* Optionally, pass true as the second argument to force any onChange events to fire\r\n\t* @public\r\n\t*/\t\r\n\tFlatDatePicker.prototype.exit = function() {\r\n\t\tInputBase.prototype.exit.apply(this, arguments);\r\n\t\tif (this.__flatPickr) {\r\n\t\t\tif (this.__flatPickr.isOpen) {\r\n\t\t\t\tthis.close();\r\n\t\t\t}\r\n\t\t\tthis.destroy();\r\n\t\t}\r\n\t\tthis.__flatPickr = undefined;\r\n\t};\r\n\t\r\n\treturn FlatDatePicker;\r\n\r\n}, /* bExport= */ true);",
		"it/designfuture/flatpickr/FlatDatePickerRenderer.js": "/*!\r\n * ${copyright}\r\n */\r\n\r\nsap.ui.define(['jquery.sap.global', 'sap/m/DatePickerRenderer'],\r\n\tfunction(jQuery, DatePickerRenderer) {\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * FlatDatePicker renderer.\r\n\t * @static\r\n\t * @namespace\r\n\t */\r\n\tvar FlatDatePickerRenderer = DatePickerRenderer.extend(\"it.designfuture.flatpickr.FlatDatePickerRenderer\");\r\n\t\r\n\t/**\r\n\t * Add the custom class to render the Date Picker, using the provided {@link sap.ui.core.RenderManager}.\r\n\t *\r\n\t * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.\r\n\t * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered.\r\n\t */\r\n\tFlatDatePickerRenderer.addOuterClasses = function(oRm, oControl) {\r\n\t\toRm.addClass(\"flatpickrCustomControl\");\r\n\t};\r\n\t\r\n\t/**\r\n\t * Overrided to add data-input custom data\r\n\t *\r\n\t * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.\r\n\t * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered.\r\n\t */\r\n\tFlatDatePickerRenderer.writeInnerAttributes = function(oRm, oDP) {\r\n\t\toRm.write(\" data-input \");\r\n\t};\r\n\t\r\n\t/**\r\n\t * Overrided to add data-toggle custom data\r\n\t *\r\n\t * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer\r\n\t * @param {sap.m.DatePicker} oDP an object representation of the control that should be rendered\r\n\t */\r\n\tFlatDatePickerRenderer.writeInnerContent = function(oRm, oDP) {\r\n\r\n\t\tif (oDP.getEnabled() && oDP.getEditable()) {\r\n\t\t\tvar aClasses = [\"sapMInputValHelpInner\"];\r\n\t\t\tvar mAttributes = {};\r\n\r\n\t\t\tmAttributes[\"id\"] = oDP.getId() + \"-icon\";\r\n\t\t\tmAttributes[\"tabindex\"] = \"-1\"; // to get focus events on it, needed for popup autoclose handling\r\n\t\t\toRm.write('<div class=\"sapMInputValHelp\" data-toggle>');\r\n\t\t\toRm.writeIcon(\"sap-icon://appointment-2\", aClasses, mAttributes);\r\n\t\t\toRm.write(\"</div>\");\r\n\t\t}\r\n\r\n\t\t// invisible span with description for keyboard navigation\r\n\t\tvar rb = sap.ui.getCore().getLibraryResourceBundle(\"sap.ui.unified\");\r\n\t\t\t// ResourceBundle always returns the key if the text is not found\r\n\t\t// ResourceBundle always returns the key if the text is not found\r\n\t\tvar sText = rb.getText(\"DATEPICKER_DATE_TYPE\");\r\n\r\n\t\tvar sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oDP, oDP.getTooltip_AsString());\r\n\t\tif (sTooltip) {\r\n\t\t\t// add tooltip to description because it is not read by JAWS from title-attribute if a label is assigned\r\n\t\t\tsText = sText + \". \" + sTooltip;\r\n\t\t}\r\n\t\toRm.write('<SPAN id=\"' + oDP.getId() + '-Descr\" style=\"visibility: hidden; display: none;\">');\r\n\t\toRm.writeEscaped(sText);\r\n\t\toRm.write('</SPAN>');\r\n\r\n\t};\r\n\r\n\treturn FlatDatePickerRenderer;\r\n\r\n}, /* bExport= */ true);",
		"it/designfuture/flatpickr/flatpickr.js": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\r\n\r\n/*! flatpickr v2.4.7, @license MIT */\r\nfunction Flatpickr(element, config) {\r\n\tvar self = this;\r\n\r\n\tself.changeMonth = changeMonth;\r\n\tself.changeYear = changeYear;\r\n\tself.clear = clear;\r\n\tself.close = close;\r\n\tself._createElement = createElement;\r\n\tself.destroy = destroy;\r\n\tself.formatDate = formatDate;\r\n\tself.isEnabled = isEnabled;\r\n\tself.jumpToDate = jumpToDate;\r\n\tself.open = open;\r\n\tself.redraw = redraw;\r\n\tself.set = set;\r\n\tself.setDate = setDate;\r\n\tself.toggle = toggle;\r\n\r\n\tfunction init() {\r\n\t\tif (element._flatpickr) destroy(element._flatpickr);\r\n\r\n\t\telement._flatpickr = self;\r\n\r\n\t\tself.element = element;\r\n\t\tself.instanceConfig = config || {};\r\n\t\tself.parseDate = Flatpickr.prototype.parseDate.bind(self);\r\n\r\n\t\tsetupFormats();\r\n\t\tparseConfig();\r\n\t\tsetupLocale();\r\n\t\tsetupInputs();\r\n\t\tsetupDates();\r\n\t\tsetupHelperFunctions();\r\n\r\n\t\tself.isOpen = self.config.inline;\r\n\r\n\t\tself.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === \"single\" && !self.config.disable.length && !self.config.enable.length && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n\r\n\t\tif (!self.isMobile) build();\r\n\r\n\t\tbind();\r\n\r\n\t\tif (self.selectedDates.length || self.config.noCalendar) {\r\n\t\t\tif (self.config.enableTime) setHoursFromDate(self.config.noCalendar ? self.config.minDate : null);\r\n\t\t\tupdateValue();\r\n\t\t}\r\n\r\n\t\tif (self.config.weekNumbers) {\r\n\t\t\tself.calendarContainer.style.width = self.days.clientWidth + self.weekWrapper.clientWidth + \"px\";\r\n\t\t}\r\n\r\n\t\tself.showTimeInput = self.selectedDates.length > 0 || self.config.noCalendar;\r\n\r\n\t\tif (!self.isMobile) positionCalendar();\r\n\t\ttriggerEvent(\"Ready\");\r\n\t}\r\n\r\n\tfunction bindToInstance(fn) {\r\n\t\tif (fn && fn.bind) return fn.bind(self);\r\n\t\treturn fn;\r\n\t}\r\n\r\n\tfunction updateTime(e) {\r\n\t\tif (self.config.noCalendar && !self.selectedDates.length)\r\n\t\t\t// picking time only\r\n\t\t\tself.selectedDates = [self.now];\r\n\r\n\t\ttimeWrapper(e);\r\n\r\n\t\tif (!self.selectedDates.length) return;\r\n\r\n\t\tif (!self.minDateHasTime || e.type !== \"input\" || e.target.value.length >= 2) {\r\n\t\t\tsetHoursFromInputs();\r\n\t\t\tupdateValue();\r\n\t\t} else {\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tsetHoursFromInputs();\r\n\t\t\t\tupdateValue();\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setHoursFromInputs() {\r\n\t\tif (!self.config.enableTime) return;\r\n\r\n\t\tvar hours = parseInt(self.hourElement.value, 10) || 0,\r\n\t\t    minutes = parseInt(self.minuteElement.value, 10) || 0,\r\n\t\t    seconds = self.config.enableSeconds ? parseInt(self.secondElement.value, 10) || 0 : 0;\r\n\r\n\t\tif (self.amPM) hours = hours % 12 + 12 * (self.amPM.textContent === \"PM\");\r\n\r\n\t\tif (self.minDateHasTime && compareDates(self.latestSelectedDateObj, self.config.minDate) === 0) {\r\n\r\n\t\t\thours = Math.max(hours, self.config.minDate.getHours());\r\n\t\t\tif (hours === self.config.minDate.getHours()) minutes = Math.max(minutes, self.config.minDate.getMinutes());\r\n\t\t}\r\n\r\n\t\tif (self.maxDateHasTime && compareDates(self.latestSelectedDateObj, self.config.maxDate) === 0) {\r\n\t\t\thours = Math.min(hours, self.config.maxDate.getHours());\r\n\t\t\tif (hours === self.config.maxDate.getHours()) minutes = Math.min(minutes, self.config.maxDate.getMinutes());\r\n\t\t}\r\n\r\n\t\tsetHours(hours, minutes, seconds);\r\n\t}\r\n\r\n\tfunction setHoursFromDate(dateObj) {\r\n\t\tvar date = dateObj || self.latestSelectedDateObj;\r\n\r\n\t\tif (date) setHours(date.getHours(), date.getMinutes(), date.getSeconds());\r\n\t}\r\n\r\n\tfunction setHours(hours, minutes, seconds) {\r\n\t\tif (self.selectedDates.length) {\r\n\t\t\tself.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);\r\n\t\t}\r\n\r\n\t\tif (!self.config.enableTime || self.isMobile) return;\r\n\r\n\t\tself.hourElement.value = self.pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * (hours % 12 === 0) : hours);\r\n\r\n\t\tself.minuteElement.value = self.pad(minutes);\r\n\r\n\t\tif (!self.config.time_24hr) self.amPM.textContent = hours >= 12 ? \"PM\" : \"AM\";\r\n\r\n\t\tif (self.config.enableSeconds) self.secondElement.value = self.pad(seconds);\r\n\t}\r\n\r\n\tfunction onYearInput(event) {\r\n\t\tvar year = event.target.value;\r\n\t\tif (event.delta) year = (parseInt(year) + event.delta).toString();\r\n\r\n\t\tif (year.length === 4) {\r\n\t\t\tself.currentYearElement.blur();\r\n\t\t\tif (!/[^\\d]/.test(year)) changeYear(year);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onMonthScroll(e) {\r\n\t\te.preventDefault();\r\n\t\tself.changeMonth(Math.max(-1, Math.min(1, e.wheelDelta || -e.deltaY)));\r\n\t}\r\n\r\n\tfunction bind() {\r\n\t\tif (self.config.wrap) {\r\n\t\t\t[\"open\", \"close\", \"toggle\", \"clear\"].forEach(function (el) {\r\n\t\t\t\tvar toggles = self.element.querySelectorAll(\"[data-\" + el + \"]\");\r\n\t\t\t\tfor (var i = 0; i < toggles.length; i++) {\r\n\t\t\t\t\ttoggles[i].addEventListener(\"click\", self[el]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (window.document.createEvent !== undefined) {\r\n\t\t\tself.changeEvent = window.document.createEvent(\"HTMLEvents\");\r\n\t\t\tself.changeEvent.initEvent(\"change\", false, true);\r\n\t\t}\r\n\r\n\t\tif (self.isMobile) return setupMobile();\r\n\r\n\t\tself.debouncedResize = debounce(onResize, 50);\r\n\t\tself.triggerChange = function () {\r\n\t\t\ttriggerEvent(\"Change\");\r\n\t\t};\r\n\t\tself.debouncedChange = debounce(self.triggerChange, 300);\r\n\r\n\t\tif (self.config.mode === \"range\" && self.days) self.days.addEventListener(\"mouseover\", onMouseOver);\r\n\r\n\t\tself.calendarContainer.addEventListener(\"keydown\", onKeyDown);\r\n\r\n\t\tif (!self.config.static) (self.altInput || self.input).addEventListener(\"keydown\", onKeyDown);\r\n\r\n\t\tif (!self.config.inline && !self.config.static) window.addEventListener(\"resize\", self.debouncedResize);\r\n\r\n\t\tif (window.ontouchstart) window.document.addEventListener(\"touchstart\", documentClick);\r\n\r\n\t\twindow.document.addEventListener(\"click\", documentClick);\r\n\t\t(self.altInput || self.input).addEventListener(\"blur\", documentClick);\r\n\r\n\t\tif (self.config.clickOpens) (self.altInput || self.input).addEventListener(\"focus\", open);\r\n\r\n\t\tif (!self.config.noCalendar) {\r\n\t\t\tself.prevMonthNav.addEventListener(\"click\", function () {\r\n\t\t\t\treturn changeMonth(-1);\r\n\t\t\t});\r\n\t\t\tself.nextMonthNav.addEventListener(\"click\", function () {\r\n\t\t\t\treturn changeMonth(1);\r\n\t\t\t});\r\n\r\n\t\t\tself.currentMonthElement.addEventListener(\"wheel\", function (e) {\r\n\t\t\t\treturn debounce(onMonthScroll(e), 50);\r\n\t\t\t});\r\n\t\t\tself.currentYearElement.addEventListener(\"wheel\", function (e) {\r\n\t\t\t\treturn debounce(yearScroll(e), 50);\r\n\t\t\t});\r\n\t\t\tself.currentYearElement.addEventListener(\"focus\", function () {\r\n\t\t\t\tself.currentYearElement.select();\r\n\t\t\t});\r\n\r\n\t\t\tself.currentYearElement.addEventListener(\"input\", onYearInput);\r\n\t\t\tself.currentYearElement.addEventListener(\"increment\", onYearInput);\r\n\r\n\t\t\tself.days.addEventListener(\"click\", selectDate);\r\n\t\t}\r\n\r\n\t\tif (self.config.enableTime) {\r\n\t\t\tself.timeContainer.addEventListener(\"transitionend\", positionCalendar);\r\n\t\t\tself.timeContainer.addEventListener(\"wheel\", function (e) {\r\n\t\t\t\treturn debounce(updateTime(e), 5);\r\n\t\t\t});\r\n\t\t\tself.timeContainer.addEventListener(\"input\", updateTime);\r\n\t\t\tself.timeContainer.addEventListener(\"increment\", updateTime);\r\n\t\t\tself.timeContainer.addEventListener(\"increment\", self.debouncedChange);\r\n\r\n\t\t\tself.timeContainer.addEventListener(\"wheel\", self.debouncedChange);\r\n\t\t\tself.timeContainer.addEventListener(\"input\", self.triggerChange);\r\n\r\n\t\t\tself.hourElement.addEventListener(\"focus\", function () {\r\n\t\t\t\tself.hourElement.select();\r\n\t\t\t});\r\n\t\t\tself.minuteElement.addEventListener(\"focus\", function () {\r\n\t\t\t\tself.minuteElement.select();\r\n\t\t\t});\r\n\r\n\t\t\tif (self.secondElement) {\r\n\t\t\t\tself.secondElement.addEventListener(\"focus\", function () {\r\n\t\t\t\t\tself.secondElement.select();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (self.amPM) {\r\n\t\t\t\tself.amPM.addEventListener(\"click\", function (e) {\r\n\t\t\t\t\tupdateTime(e);\r\n\t\t\t\t\tself.triggerChange(e);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction jumpToDate(jumpDate) {\r\n\t\tjumpDate = jumpDate ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);\r\n\r\n\t\ttry {\r\n\t\t\tself.currentYear = jumpDate.getFullYear();\r\n\t\t\tself.currentMonth = jumpDate.getMonth();\r\n\t\t} catch (e) {\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tconsole.error(e.stack);\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tconsole.warn(\"Invalid date supplied: \" + jumpDate);\r\n\t\t}\r\n\r\n\t\tself.redraw();\r\n\t}\r\n\r\n\tfunction incrementNumInput(e, delta, inputElem) {\r\n\t\tvar input = inputElem || e.target.parentNode.childNodes[0];\r\n\t\tvar ev = void 0;\r\n\r\n\t\ttry {\r\n\t\t\tev = new Event(\"increment\", { \"bubbles\": true });\r\n\t\t} catch (err) {\r\n\t\t\tev = window.document.createEvent(\"CustomEvent\");\r\n\t\t\tev.initCustomEvent(\"increment\", true, true, {});\r\n\t\t}\r\n\r\n\t\tev.delta = delta;\r\n\t\tinput.dispatchEvent(ev);\r\n\t}\r\n\r\n\tfunction createNumberInput(inputClassName) {\r\n\t\tvar wrapper = createElement(\"div\", \"numInputWrapper\"),\r\n\t\t    numInput = createElement(\"input\", \"numInput \" + inputClassName),\r\n\t\t    arrowUp = createElement(\"span\", \"arrowUp\"),\r\n\t\t    arrowDown = createElement(\"span\", \"arrowDown\");\r\n\r\n\t\tnumInput.type = \"text\";\r\n\t\tnumInput.pattern = \"\\\\d*\";\r\n\t\twrapper.appendChild(numInput);\r\n\t\twrapper.appendChild(arrowUp);\r\n\t\twrapper.appendChild(arrowDown);\r\n\r\n\t\tarrowUp.addEventListener(\"click\", function (e) {\r\n\t\t\treturn incrementNumInput(e, 1);\r\n\t\t});\r\n\t\tarrowDown.addEventListener(\"click\", function (e) {\r\n\t\t\treturn incrementNumInput(e, -1);\r\n\t\t});\r\n\t\treturn wrapper;\r\n\t}\r\n\r\n\tfunction build() {\r\n\t\tvar fragment = window.document.createDocumentFragment();\r\n\t\tself.calendarContainer = createElement(\"div\", \"flatpickr-calendar\");\r\n\t\tself.numInputType = navigator.userAgent.indexOf(\"MSIE 9.0\") > 0 ? \"text\" : \"number\";\r\n\r\n\t\tif (!self.config.noCalendar) {\r\n\t\t\tfragment.appendChild(buildMonthNav());\r\n\t\t\tself.innerContainer = createElement(\"div\", \"flatpickr-innerContainer\");\r\n\r\n\t\t\tif (self.config.weekNumbers) self.innerContainer.appendChild(buildWeeks());\r\n\r\n\t\t\tself.rContainer = createElement(\"div\", \"flatpickr-rContainer\");\r\n\t\t\tself.rContainer.appendChild(buildWeekdays());\r\n\r\n\t\t\tif (!self.days) {\r\n\t\t\t\tself.days = createElement(\"div\", \"flatpickr-days\");\r\n\t\t\t\tself.days.tabIndex = -1;\r\n\t\t\t}\r\n\r\n\t\t\tbuildDays();\r\n\t\t\tself.rContainer.appendChild(self.days);\r\n\r\n\t\t\tself.innerContainer.appendChild(self.rContainer);\r\n\t\t\tfragment.appendChild(self.innerContainer);\r\n\t\t}\r\n\r\n\t\tif (self.config.enableTime) fragment.appendChild(buildTime());\r\n\r\n\t\tif (self.config.mode === \"range\") self.calendarContainer.classList.add(\"rangeMode\");\r\n\r\n\t\tself.calendarContainer.appendChild(fragment);\r\n\r\n\t\tvar customAppend = self.config.appendTo && self.config.appendTo.nodeType;\r\n\r\n\t\tif (self.config.inline || self.config.static) {\r\n\t\t\tself.calendarContainer.classList.add(self.config.inline ? \"inline\" : \"static\");\r\n\r\n\t\t\tif (self.config.inline && !customAppend) {\r\n\t\t\t\treturn self.element.parentNode.insertBefore(self.calendarContainer, (self.altInput || self.input).nextSibling);\r\n\t\t\t}\r\n\r\n\t\t\tif (self.config.static) {\r\n\t\t\t\tvar wrapper = createElement(\"div\", \"flatpickr-wrapper\");\r\n\t\t\t\tself.element.parentNode.insertBefore(wrapper, self.element);\r\n\t\t\t\twrapper.appendChild(self.element);\r\n\r\n\t\t\t\tif (self.altInput) wrapper.appendChild(self.altInput);\r\n\r\n\t\t\t\twrapper.appendChild(self.calendarContainer);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t(customAppend ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);\r\n\t}\r\n\r\n\tfunction createDay(className, date, dayNumber) {\r\n\t\tvar dateIsEnabled = isEnabled(date, true),\r\n\t\t    dayElement = createElement(\"span\", \"flatpickr-day \" + className, date.getDate());\r\n\r\n\t\tdayElement.dateObj = date;\r\n\r\n\t\ttoggleClass(dayElement, \"today\", compareDates(date, self.now) === 0);\r\n\r\n\t\tif (dateIsEnabled) {\r\n\r\n\t\t\tif (isDateSelected(date)) {\r\n\t\t\t\tdayElement.classList.add(\"selected\");\r\n\t\t\t\tself.selectedDateElem = dayElement;\r\n\t\t\t\tif (self.config.mode === \"range\") {\r\n\t\t\t\t\ttoggleClass(dayElement, \"startRange\", compareDates(date, self.selectedDates[0]) === 0);\r\n\r\n\t\t\t\t\ttoggleClass(dayElement, \"endRange\", compareDates(date, self.selectedDates[1]) === 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdayElement.classList.add(\"disabled\");\r\n\t\t\tif (self.selectedDates[0] && date > self.minRangeDate && date < self.selectedDates[0]) self.minRangeDate = date;else if (self.selectedDates[0] && date < self.maxRangeDate && date > self.selectedDates[0]) self.maxRangeDate = date;\r\n\t\t}\r\n\r\n\t\tif (self.config.mode === \"range\") {\r\n\t\t\tif (isDateInRange(date) && !isDateSelected(date)) dayElement.classList.add(\"inRange\");\r\n\r\n\t\t\tif (self.selectedDates.length === 1 && (date < self.minRangeDate || date > self.maxRangeDate)) dayElement.classList.add(\"notAllowed\");\r\n\t\t}\r\n\r\n\t\tif (self.config.weekNumbers && className !== \"prevMonthDay\" && dayNumber % 7 === 1) {\r\n\t\t\tself.weekNumbers.insertAdjacentHTML(\"beforeend\", \"<span class='disabled flatpickr-day'>\" + self.config.getWeek(date) + \"</span>\");\r\n\t\t}\r\n\r\n\t\ttriggerEvent(\"DayCreate\", dayElement);\r\n\r\n\t\treturn dayElement;\r\n\t}\r\n\r\n\tfunction buildDays(year, month) {\r\n\t\tvar firstOfMonth = (new Date(self.currentYear, self.currentMonth, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7,\r\n\t\t    isRangeMode = self.config.mode === \"range\";\r\n\r\n\t\tself.prevMonthDays = self.utils.getDaysinMonth((self.currentMonth - 1 + 12) % 12);\r\n\r\n\t\tvar daysInMonth = self.utils.getDaysinMonth(),\r\n\t\t    days = window.document.createDocumentFragment();\r\n\r\n\t\tvar dayNumber = self.prevMonthDays + 1 - firstOfMonth;\r\n\r\n\t\tif (self.config.weekNumbers && self.weekNumbers.firstChild) self.weekNumbers.textContent = \"\";\r\n\r\n\t\tif (isRangeMode) {\r\n\t\t\t// const dateLimits = self.config.enable.length || self.config.disable.length || self.config.mixDate || self.config.maxDate;\r\n\t\t\tself.minRangeDate = new Date(self.currentYear, self.currentMonth - 1, dayNumber);\r\n\t\t\tself.maxRangeDate = new Date(self.currentYear, self.currentMonth + 1, (42 - firstOfMonth) % daysInMonth);\r\n\t\t}\r\n\r\n\t\tif (self.days.firstChild) self.days.textContent = \"\";\r\n\r\n\t\t// prepend days from the ending of previous month\r\n\t\tfor (; dayNumber <= self.prevMonthDays; dayNumber++) {\r\n\t\t\tdays.appendChild(createDay(\"prevMonthDay\", new Date(self.currentYear, self.currentMonth - 1, dayNumber), dayNumber));\r\n\t\t}\r\n\r\n\t\t// Start at 1 since there is no 0th day\r\n\t\tfor (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++) {\r\n\t\t\tdays.appendChild(createDay(\"\", new Date(self.currentYear, self.currentMonth, dayNumber), dayNumber));\r\n\t\t}\r\n\r\n\t\t// append days from the next month\r\n\t\tfor (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth; dayNum++) {\r\n\t\t\tdays.appendChild(createDay(\"nextMonthDay\", new Date(self.currentYear, self.currentMonth + 1, dayNum % daysInMonth), dayNum));\r\n\t\t}\r\n\r\n\t\tif (isRangeMode && self.selectedDates.length === 1 && days.childNodes[0]) {\r\n\t\t\tself._hidePrevMonthArrow = self._hidePrevMonthArrow || self.minRangeDate > days.childNodes[0].dateObj;\r\n\r\n\t\t\tself._hideNextMonthArrow = self._hideNextMonthArrow || self.maxRangeDate < new Date(self.currentYear, self.currentMonth + 1, 1);\r\n\t\t} else updateNavigationCurrentMonth();\r\n\r\n\t\tself.days.appendChild(days);\r\n\t\treturn self.days;\r\n\t}\r\n\r\n\tfunction buildMonthNav() {\r\n\t\tvar monthNavFragment = window.document.createDocumentFragment();\r\n\t\tself.monthNav = createElement(\"div\", \"flatpickr-month\");\r\n\r\n\t\tself.prevMonthNav = createElement(\"span\", \"flatpickr-prev-month\");\r\n\t\tself.prevMonthNav.innerHTML = self.config.prevArrow;\r\n\r\n\t\tself.currentMonthElement = createElement(\"span\", \"cur-month\");\r\n\t\tself.currentMonthElement.title = self.l10n.scrollTitle;\r\n\r\n\t\tvar yearInput = createNumberInput(\"cur-year\");\r\n\t\tself.currentYearElement = yearInput.childNodes[0];\r\n\t\tself.currentYearElement.title = self.l10n.scrollTitle;\r\n\r\n\t\tif (self.config.minDate) self.currentYearElement.min = self.config.minDate.getFullYear();\r\n\r\n\t\tif (self.config.maxDate) {\r\n\t\t\tself.currentYearElement.max = self.config.maxDate.getFullYear();\r\n\r\n\t\t\tself.currentYearElement.disabled = self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();\r\n\t\t}\r\n\r\n\t\tself.nextMonthNav = createElement(\"span\", \"flatpickr-next-month\");\r\n\t\tself.nextMonthNav.innerHTML = self.config.nextArrow;\r\n\r\n\t\tself.navigationCurrentMonth = createElement(\"span\", \"flatpickr-current-month\");\r\n\t\tself.navigationCurrentMonth.appendChild(self.currentMonthElement);\r\n\t\tself.navigationCurrentMonth.appendChild(yearInput);\r\n\r\n\t\tmonthNavFragment.appendChild(self.prevMonthNav);\r\n\t\tmonthNavFragment.appendChild(self.navigationCurrentMonth);\r\n\t\tmonthNavFragment.appendChild(self.nextMonthNav);\r\n\t\tself.monthNav.appendChild(monthNavFragment);\r\n\r\n\t\tObject.defineProperty(self, \"_hidePrevMonthArrow\", {\r\n\t\t\tget: function get() {\r\n\t\t\t\treturn this.__hidePrevMonthArrow;\r\n\t\t\t},\r\n\t\t\tset: function set(bool) {\r\n\t\t\t\tif (this.__hidePrevMonthArrow !== bool) self.prevMonthNav.style.display = bool ? \"none\" : \"block\";\r\n\t\t\t\tthis.__hidePrevMonthArrow = bool;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tObject.defineProperty(self, \"_hideNextMonthArrow\", {\r\n\t\t\tget: function get() {\r\n\t\t\t\treturn this.__hideNextMonthArrow;\r\n\t\t\t},\r\n\t\t\tset: function set(bool) {\r\n\t\t\t\tif (this.__hideNextMonthArrow !== bool) self.nextMonthNav.style.display = bool ? \"none\" : \"block\";\r\n\t\t\t\tthis.__hideNextMonthArrow = bool;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tupdateNavigationCurrentMonth();\r\n\r\n\t\treturn self.monthNav;\r\n\t}\r\n\r\n\tfunction buildTime() {\r\n\t\tself.calendarContainer.classList.add(\"hasTime\");\r\n\t\tif (self.config.noCalendar) self.calendarContainer.classList.add(\"noCalendar\");\r\n\t\tself.timeContainer = createElement(\"div\", \"flatpickr-time\");\r\n\t\tself.timeContainer.tabIndex = -1;\r\n\t\tvar separator = createElement(\"span\", \"flatpickr-time-separator\", \":\");\r\n\r\n\t\tvar hourInput = createNumberInput(\"flatpickr-hour\");\r\n\t\tself.hourElement = hourInput.childNodes[0];\r\n\r\n\t\tvar minuteInput = createNumberInput(\"flatpickr-minute\");\r\n\t\tself.minuteElement = minuteInput.childNodes[0];\r\n\r\n\t\tself.hourElement.tabIndex = self.minuteElement.tabIndex = -1;\r\n\r\n\t\tself.hourElement.value = self.pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.defaultHour);\r\n\r\n\t\tself.minuteElement.value = self.pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : self.config.defaultMinute);\r\n\r\n\t\tself.hourElement.step = self.config.hourIncrement;\r\n\t\tself.minuteElement.step = self.config.minuteIncrement;\r\n\r\n\t\tself.hourElement.min = self.config.time_24hr ? 0 : 1;\r\n\t\tself.hourElement.max = self.config.time_24hr ? 23 : 12;\r\n\r\n\t\tself.minuteElement.min = 0;\r\n\t\tself.minuteElement.max = 59;\r\n\r\n\t\tself.hourElement.title = self.minuteElement.title = self.l10n.scrollTitle;\r\n\r\n\t\tself.timeContainer.appendChild(hourInput);\r\n\t\tself.timeContainer.appendChild(separator);\r\n\t\tself.timeContainer.appendChild(minuteInput);\r\n\r\n\t\tif (self.config.time_24hr) self.timeContainer.classList.add(\"time24hr\");\r\n\r\n\t\tif (self.config.enableSeconds) {\r\n\t\t\tself.timeContainer.classList.add(\"hasSeconds\");\r\n\r\n\t\t\tvar secondInput = createNumberInput(\"flatpickr-second\");\r\n\t\t\tself.secondElement = secondInput.childNodes[0];\r\n\r\n\t\t\tself.secondElement.value = self.latestSelectedDateObj ? self.pad(self.latestSelectedDateObj.getSeconds()) : \"00\";\r\n\r\n\t\t\tself.secondElement.step = self.minuteElement.step;\r\n\t\t\tself.secondElement.min = self.minuteElement.min;\r\n\t\t\tself.secondElement.max = self.minuteElement.max;\r\n\r\n\t\t\tself.timeContainer.appendChild(createElement(\"span\", \"flatpickr-time-separator\", \":\"));\r\n\t\t\tself.timeContainer.appendChild(secondInput);\r\n\t\t}\r\n\r\n\t\tif (!self.config.time_24hr) {\r\n\t\t\t// add self.amPM if appropriate\r\n\t\t\tself.amPM = createElement(\"span\", \"flatpickr-am-pm\", [\"AM\", \"PM\"][self.hourElement.value > 11 | 0]);\r\n\t\t\tself.amPM.title = self.l10n.toggleTitle;\r\n\t\t\tself.amPM.tabIndex = -1;\r\n\t\t\tself.timeContainer.appendChild(self.amPM);\r\n\t\t}\r\n\r\n\t\treturn self.timeContainer;\r\n\t}\r\n\r\n\tfunction buildWeekdays() {\r\n\t\tif (!self.weekdayContainer) self.weekdayContainer = createElement(\"div\", \"flatpickr-weekdays\");\r\n\r\n\t\tvar firstDayOfWeek = self.l10n.firstDayOfWeek;\r\n\t\tvar weekdays = self.l10n.weekdays.shorthand.slice();\r\n\r\n\t\tif (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {\r\n\t\t\tweekdays = [].concat(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));\r\n\t\t}\r\n\r\n\t\tself.weekdayContainer.innerHTML = \"\\n\\t\\t<span class=flatpickr-weekday>\\n\\t\\t\\t\" + weekdays.join(\"</span><span class=flatpickr-weekday>\") + \"\\n\\t\\t</span>\\n\\t\\t\";\r\n\r\n\t\treturn self.weekdayContainer;\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\tfunction buildWeeks() {\r\n\t\tself.calendarContainer.classList.add(\"hasWeeks\");\r\n\t\tself.weekWrapper = createElement(\"div\", \"flatpickr-weekwrapper\");\r\n\t\tself.weekWrapper.appendChild(createElement(\"span\", \"flatpickr-weekday\", self.l10n.weekAbbreviation));\r\n\t\tself.weekNumbers = createElement(\"div\", \"flatpickr-weeks\");\r\n\t\tself.weekWrapper.appendChild(self.weekNumbers);\r\n\r\n\t\treturn self.weekWrapper;\r\n\t}\r\n\r\n\tfunction changeMonth(value, is_offset) {\r\n\t\tis_offset = typeof is_offset === \"undefined\" || is_offset;\r\n\t\tvar delta = is_offset ? value : value - self.currentMonth;\r\n\r\n\t\tif (delta < 0 && self._hidePrevMonthArrow || delta > 0 && self._hideNextMonthArrow) return;\r\n\r\n\t\tself.currentMonth += delta;\r\n\r\n\t\tif (self.currentMonth < 0 || self.currentMonth > 11) {\r\n\t\t\tself.currentYear += self.currentMonth > 11 ? 1 : -1;\r\n\t\t\tself.currentMonth = (self.currentMonth + 12) % 12;\r\n\r\n\t\t\ttriggerEvent(\"YearChange\");\r\n\t\t}\r\n\r\n\t\tupdateNavigationCurrentMonth();\r\n\t\tbuildDays();\r\n\r\n\t\tif (!self.config.noCalendar) self.days.focus();\r\n\r\n\t\ttriggerEvent(\"MonthChange\");\r\n\t}\r\n\r\n\tfunction clear(triggerChangeEvent) {\r\n\t\tself.input.value = \"\";\r\n\r\n\t\tif (self.altInput) self.altInput.value = \"\";\r\n\r\n\t\tif (self.mobileInput) self.mobileInput.value = \"\";\r\n\r\n\t\tself.selectedDates = [];\r\n\t\tself.latestSelectedDateObj = null;\r\n\t\tself.showTimeInput = false;\r\n\r\n\t\tself.redraw();\r\n\r\n\t\tif (triggerChangeEvent !== false)\r\n\t\t\t// triggerChangeEvent is true (default) or an Event\r\n\t\t\ttriggerEvent(\"Change\");\r\n\t}\r\n\r\n\tfunction close() {\r\n\t\tself.isOpen = false;\r\n\r\n\t\tif (!self.isMobile) {\r\n\t\t\tself.calendarContainer.classList.remove(\"open\");\r\n\t\t\t(self.altInput || self.input).classList.remove(\"active\");\r\n\t\t}\r\n\r\n\t\ttriggerEvent(\"Close\");\r\n\t}\r\n\r\n\tfunction destroy(instance) {\r\n\t\tinstance = instance || self;\r\n\t\tinstance.clear(false);\r\n\r\n\t\twindow.removeEventListener(\"resize\", instance.debouncedResize);\r\n\r\n\t\twindow.document.removeEventListener(\"click\", documentClick);\r\n\t\twindow.document.removeEventListener(\"touchstart\", documentClick);\r\n\t\twindow.document.removeEventListener(\"blur\", documentClick);\r\n\r\n\t\tif (instance.timeContainer) instance.timeContainer.removeEventListener(\"transitionend\", positionCalendar);\r\n\r\n\t\tif (instance.mobileInput) {\r\n\t\t\tif (instance.mobileInput.parentNode) instance.mobileInput.parentNode.removeChild(instance.mobileInput);\r\n\t\t\tdelete instance.mobileInput;\r\n\t\t} else if (instance.calendarContainer && instance.calendarContainer.parentNode) instance.calendarContainer.parentNode.removeChild(instance.calendarContainer);\r\n\r\n\t\tif (instance.altInput) {\r\n\t\t\tinstance.input.type = \"text\";\r\n\t\t\tif (instance.altInput.parentNode) instance.altInput.parentNode.removeChild(instance.altInput);\r\n\t\t\tdelete instance.altInput;\r\n\t\t}\r\n\r\n\t\tinstance.input.type = instance.input._type;\r\n\t\tinstance.input.classList.remove(\"flatpickr-input\");\r\n\t\tinstance.input.removeEventListener(\"focus\", open);\r\n\t\tinstance.input.removeAttribute(\"readonly\");\r\n\r\n\t\tdelete instance.input._flatpickr;\r\n\t}\r\n\r\n\tfunction isCalendarElem(elem) {\r\n\t\tif (self.config.appendTo && self.config.appendTo.contains(elem)) return true;\r\n\r\n\t\tvar e = elem;\r\n\t\twhile (e) {\r\n\r\n\t\t\tif (e === self.calendarContainer) return true;\r\n\t\t\te = e.parentNode;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction documentClick(e) {\r\n\t\tif (self.isOpen && !self.config.inline) {\r\n\t\t\tvar isCalendarElement = isCalendarElem(e.target);\r\n\t\t\tvar isInput = e.target === self.input || e.target === self.altInput || self.element.contains(e.target) ||\r\n\t\t\t// web components\r\n\t\t\te.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));\r\n\r\n\t\t\tvar lostFocus = e.type === \"blur\" ? isInput && e.relatedTarget && !isCalendarElem(e.relatedTarget) : !isInput && !isCalendarElement;\r\n\r\n\t\t\tif (lostFocus) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tself.close();\r\n\r\n\t\t\t\tif (self.config.mode === \"range\" && self.selectedDates.length === 1) {\r\n\t\t\t\t\tself.clear();\r\n\t\t\t\t\tself.redraw();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction formatDate(frmt, dateObj) {\r\n\t\tif (self.config.formatDate) return self.config.formatDate(frmt, dateObj);\r\n\r\n\t\tvar chars = frmt.split(\"\");\r\n\t\treturn chars.map(function (c, i) {\r\n\t\t\treturn self.formats[c] && chars[i - 1] !== \"\\\\\" ? self.formats[c](dateObj) : c !== \"\\\\\" ? c : \"\";\r\n\t\t}).join(\"\");\r\n\t}\r\n\r\n\tfunction changeYear(newYear) {\r\n\t\tif (!newYear || self.currentYearElement.min && newYear < self.currentYearElement.min || self.currentYearElement.max && newYear > self.currentYearElement.max) return;\r\n\r\n\t\tvar newYearNum = parseInt(newYear, 10),\r\n\t\t    isNewYear = self.currentYear !== newYearNum;\r\n\r\n\t\tself.currentYear = newYearNum || self.currentYear;\r\n\r\n\t\tif (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {\r\n\t\t\tself.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);\r\n\t\t} else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {\r\n\t\t\tself.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);\r\n\t\t}\r\n\r\n\t\tif (isNewYear) {\r\n\t\t\tself.redraw();\r\n\t\t\ttriggerEvent(\"YearChange\");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isEnabled(date, timeless) {\r\n\t\tvar ltmin = compareDates(date, self.config.minDate, typeof timeless !== \"undefined\" ? timeless : !self.minDateHasTime) < 0;\r\n\t\tvar gtmax = compareDates(date, self.config.maxDate, typeof timeless !== \"undefined\" ? timeless : !self.maxDateHasTime) > 0;\r\n\r\n\t\tif (ltmin || gtmax) return false;\r\n\r\n\t\tif (!self.config.enable.length && !self.config.disable.length) return true;\r\n\r\n\t\tvar dateToCheck = self.parseDate(date, true); // timeless\r\n\r\n\t\tvar bool = self.config.enable.length > 0,\r\n\t\t    array = bool ? self.config.enable : self.config.disable;\r\n\r\n\t\tfor (var i = 0, d; i < array.length; i++) {\r\n\t\t\td = array[i];\r\n\r\n\t\t\tif (d instanceof Function && d(dateToCheck)) // disabled by function\r\n\t\t\t\treturn bool;else if (d instanceof Date && d.getTime() === dateToCheck.getTime())\r\n\t\t\t\t// disabled by date\r\n\t\t\t\treturn bool;else if (typeof d === \"string\" && self.parseDate(d, true).getTime() === dateToCheck.getTime())\r\n\t\t\t\t// disabled by date string\r\n\t\t\t\treturn bool;else if ( // disabled by range\r\n\t\t\t(typeof d === \"undefined\" ? \"undefined\" : _typeof(d)) === \"object\" && d.from && d.to && dateToCheck >= d.from && dateToCheck <= d.to) return bool;\r\n\t\t}\r\n\r\n\t\treturn !bool;\r\n\t}\r\n\r\n\tfunction onKeyDown(e) {\r\n\r\n\t\tif (e.target === (self.altInput || self.input) && e.which === 13) selectDate(e);else if (self.isOpen || self.config.inline) {\r\n\t\t\tswitch (e.key) {\r\n\t\t\t\tcase \"Enter\":\r\n\t\t\t\t\tif (self.timeContainer && self.timeContainer.contains(e.target)) updateValue();else selectDate(e);\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"Escape\":\r\n\t\t\t\t\t// escape\r\n\t\t\t\t\tself.close();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ArrowLeft\":\r\n\t\t\t\t\tif (e.target !== self.input & e.target !== self.altInput) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tchangeMonth(-1);\r\n\t\t\t\t\t\tself.currentMonthElement.focus();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ArrowUp\":\r\n\t\t\t\t\tif (!self.timeContainer || !self.timeContainer.contains(e.target)) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tself.currentYear++;\r\n\t\t\t\t\t\tself.redraw();\r\n\t\t\t\t\t} else updateTime(e);\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ArrowRight\":\r\n\t\t\t\t\tif (e.target !== self.input & e.target !== self.altInput) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tchangeMonth(1);\r\n\t\t\t\t\t\tself.currentMonthElement.focus();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"ArrowDown\":\r\n\t\t\t\t\tif (!self.timeContainer || !self.timeContainer.contains(e.target)) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tself.currentYear--;\r\n\t\t\t\t\t\tself.redraw();\r\n\t\t\t\t\t} else updateTime(e);\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"Tab\":\r\n\t\t\t\t\tif (e.target === self.hourElement) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tself.minuteElement.select();\r\n\t\t\t\t\t} else if (e.target === self.minuteElement && self.amPM) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tself.amPM.focus();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttriggerEvent(\"KeyDown\", e);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onMouseOver(e) {\r\n\t\tif (self.selectedDates.length !== 1 || !e.target.classList.contains(\"flatpickr-day\")) return;\r\n\r\n\t\tvar hoverDate = e.target.dateObj,\r\n\t\t    initialDate = self.parseDate(self.selectedDates[0], true),\r\n\t\t    rangeStartDate = Math.min(hoverDate.getTime(), self.selectedDates[0].getTime()),\r\n\t\t    rangeEndDate = Math.max(hoverDate.getTime(), self.selectedDates[0].getTime()),\r\n\t\t    containsDisabled = false;\r\n\r\n\t\tfor (var t = rangeStartDate; t < rangeEndDate; t += self.utils.duration.DAY) {\r\n\t\t\tif (!isEnabled(new Date(t))) {\r\n\t\t\t\tcontainsDisabled = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar _loop = function _loop(timestamp, i) {\r\n\t\t\tvar outOfRange = timestamp < self.minRangeDate.getTime() || timestamp > self.maxRangeDate.getTime();\r\n\r\n\t\t\tif (outOfRange) {\r\n\t\t\t\tself.days.childNodes[i].classList.add(\"notAllowed\");\r\n\t\t\t\t[\"inRange\", \"startRange\", \"endRange\"].forEach(function (c) {\r\n\t\t\t\t\tself.days.childNodes[i].classList.remove(c);\r\n\t\t\t\t});\r\n\t\t\t\treturn \"continue\";\r\n\t\t\t} else if (containsDisabled && !outOfRange) return \"continue\";\r\n\r\n\t\t\t[\"startRange\", \"inRange\", \"endRange\", \"notAllowed\"].forEach(function (c) {\r\n\t\t\t\tself.days.childNodes[i].classList.remove(c);\r\n\t\t\t});\r\n\r\n\t\t\tvar minRangeDate = Math.max(self.minRangeDate.getTime(), rangeStartDate),\r\n\t\t\t    maxRangeDate = Math.min(self.maxRangeDate.getTime(), rangeEndDate);\r\n\r\n\t\t\te.target.classList.add(hoverDate < self.selectedDates[0] ? \"startRange\" : \"endRange\");\r\n\r\n\t\t\tif (initialDate > hoverDate && timestamp === initialDate.getTime()) self.days.childNodes[i].classList.add(\"endRange\");else if (initialDate < hoverDate && timestamp === initialDate.getTime()) self.days.childNodes[i].classList.add(\"startRange\");else if (timestamp >= minRangeDate && timestamp <= maxRangeDate) self.days.childNodes[i].classList.add(\"inRange\");\r\n\t\t};\r\n\r\n\t\tfor (var timestamp = self.days.childNodes[0].dateObj.getTime(), i = 0; i < 42; i++, timestamp += self.utils.duration.DAY) {\r\n\t\t\tvar _ret = _loop(timestamp, i);\r\n\r\n\t\t\tif (_ret === \"continue\") continue;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction onResize() {\r\n\t\tif (self.isOpen && !self.config.static && !self.config.inline) positionCalendar();\r\n\t}\r\n\r\n\tfunction open(e) {\r\n\t\tif (self.isMobile) {\r\n\t\t\tif (e) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\te.target.blur();\r\n\t\t\t}\r\n\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tself.mobileInput.click();\r\n\t\t\t}, 0);\r\n\r\n\t\t\ttriggerEvent(\"Open\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (self.isOpen || (self.altInput || self.input).disabled || self.config.inline) return;\r\n\r\n\t\tself.isOpen = true;\r\n\t\tself.calendarContainer.classList.add(\"open\");\r\n\t\tpositionCalendar();\r\n\t\t(self.altInput || self.input).classList.add(\"active\");\r\n\r\n\t\ttriggerEvent(\"Open\");\r\n\t}\r\n\r\n\tfunction minMaxDateSetter(type) {\r\n\t\treturn function (date) {\r\n\t\t\tvar dateObj = self.config[\"_\" + type + \"Date\"] = self.parseDate(date);\r\n\r\n\t\t\tvar inverseDateObj = self.config[\"_\" + (type === \"min\" ? \"max\" : \"min\") + \"Date\"];\r\n\t\t\tvar isValidDate = date && dateObj instanceof Date;\r\n\r\n\t\t\tif (isValidDate) {\r\n\t\t\t\tself[type + \"DateHasTime\"] = dateObj.getHours() || dateObj.getMinutes() || dateObj.getSeconds();\r\n\t\t\t}\r\n\r\n\t\t\tif (self.selectedDates) {\r\n\t\t\t\tself.selectedDates = self.selectedDates.filter(function (d) {\r\n\t\t\t\t\treturn isEnabled(d);\r\n\t\t\t\t});\r\n\t\t\t\tif (!self.selectedDates.length && type === \"min\") setHoursFromDate(dateObj);\r\n\t\t\t\tupdateValue();\r\n\t\t\t}\r\n\r\n\t\t\tif (self.days) {\r\n\t\t\t\tredraw();\r\n\r\n\t\t\t\tif (isValidDate) self.currentYearElement[type] = dateObj.getFullYear();else self.currentYearElement.removeAttribute(type);\r\n\r\n\t\t\t\tself.currentYearElement.disabled = inverseDateObj && dateObj && inverseDateObj.getFullYear() === dateObj.getFullYear();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tfunction parseConfig() {\r\n\t\tvar boolOpts = [\"utc\", \"wrap\", \"weekNumbers\", \"allowInput\", \"clickOpens\", \"time_24hr\", \"enableTime\", \"noCalendar\", \"altInput\", \"shorthandCurrentMonth\", \"inline\", \"static\", \"enableSeconds\", \"disableMobile\"];\r\n\r\n\t\tvar hooks = [\"onChange\", \"onClose\", \"onDayCreate\", \"onKeyDown\", \"onMonthChange\", \"onOpen\", \"onParseConfig\", \"onReady\", \"onValueUpdate\", \"onYearChange\"];\r\n\r\n\t\tself.config = Object.create(Flatpickr.defaultConfig);\r\n\r\n\t\tvar userConfig = _extends({}, self.instanceConfig, JSON.parse(JSON.stringify(self.element.dataset || {})));\r\n\r\n\t\tself.config.parseDate = userConfig.parseDate;\r\n\t\tself.config.formatDate = userConfig.formatDate;\r\n\r\n\t\t_extends(self.config, userConfig);\r\n\r\n\t\tif (!userConfig.dateFormat && userConfig.enableTime) {\r\n\t\t\tself.config.dateFormat = self.config.noCalendar ? \"H:i\" + (self.config.enableSeconds ? \":S\" : \"\") : Flatpickr.defaultConfig.dateFormat + \" H:i\" + (self.config.enableSeconds ? \":S\" : \"\");\r\n\t\t}\r\n\r\n\t\tif (userConfig.altInput && userConfig.enableTime && !userConfig.altFormat) {\r\n\t\t\tself.config.altFormat = self.config.noCalendar ? \"h:i\" + (self.config.enableSeconds ? \":S K\" : \" K\") : Flatpickr.defaultConfig.altFormat + (\" h:i\" + (self.config.enableSeconds ? \":S\" : \"\") + \" K\");\r\n\t\t}\r\n\r\n\t\tObject.defineProperty(self.config, \"minDate\", {\r\n\t\t\tget: function get() {\r\n\t\t\t\treturn this._minDate;\r\n\t\t\t},\r\n\t\t\tset: minMaxDateSetter(\"min\")\r\n\t\t});\r\n\r\n\t\tObject.defineProperty(self.config, \"maxDate\", {\r\n\t\t\tget: function get() {\r\n\t\t\t\treturn this._maxDate;\r\n\t\t\t},\r\n\t\t\tset: minMaxDateSetter(\"max\")\r\n\t\t});\r\n\r\n\t\tself.config.minDate = userConfig.minDate;\r\n\t\tself.config.maxDate = userConfig.maxDate;\r\n\r\n\t\tfor (var i = 0; i < boolOpts.length; i++) {\r\n\t\t\tself.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === \"true\";\r\n\t\t}for (var _i = 0; _i < hooks.length; _i++) {\r\n\t\t\tself.config[hooks[_i]] = arrayify(self.config[hooks[_i]] || []).map(bindToInstance);\r\n\t\t}for (var _i2 = 0; _i2 < self.config.plugins.length; _i2++) {\r\n\t\t\tvar pluginConf = self.config.plugins[_i2](self) || {};\r\n\t\t\tfor (var key in pluginConf) {\r\n\r\n\t\t\t\tif (Array.isArray(self.config[key]) || ~hooks.indexOf(key)) self.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);else if (typeof userConfig[key] === \"undefined\") self.config[key] = pluginConf[key];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttriggerEvent(\"ParseConfig\");\r\n\t}\r\n\r\n\tfunction setupLocale() {\r\n\t\tif (_typeof(self.config.locale) !== \"object\" && typeof Flatpickr.l10ns[self.config.locale] === \"undefined\") console.warn(\"flatpickr: invalid locale \" + self.config.locale);\r\n\r\n\t\tself.l10n = _extends(Object.create(Flatpickr.l10ns.default), _typeof(self.config.locale) === \"object\" ? self.config.locale : self.config.locale !== \"default\" ? Flatpickr.l10ns[self.config.locale] || {} : {});\r\n\t}\r\n\r\n\tfunction positionCalendar(e) {\r\n\t\tif (e && e.target !== self.timeContainer) return;\r\n\r\n\t\tvar calendarHeight = self.calendarContainer.offsetHeight,\r\n\t\t    calendarWidth = self.calendarContainer.offsetWidth,\r\n\t\t    configPos = self.config.position,\r\n\t\t    input = self.altInput || self.input,\r\n\t\t    inputBounds = input.getBoundingClientRect(),\r\n\t\t    distanceFromBottom = window.innerHeight - inputBounds.bottom + input.offsetHeight,\r\n\t\t    showOnTop = configPos === \"above\" || configPos !== \"below\" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;\r\n\r\n\t\tvar top = window.pageYOffset + inputBounds.top + (!showOnTop ? input.offsetHeight + 2 : -calendarHeight - 2);\r\n\r\n\t\ttoggleClass(self.calendarContainer, \"arrowTop\", !showOnTop);\r\n\t\ttoggleClass(self.calendarContainer, \"arrowBottom\", showOnTop);\r\n\r\n\t\tif (self.config.inline) return;\r\n\r\n\t\tvar left = window.pageXOffset + inputBounds.left;\r\n\t\tvar right = window.document.body.offsetWidth - inputBounds.right;\r\n\t\tvar rightMost = left + calendarWidth > window.document.body.offsetWidth;\r\n\r\n\t\ttoggleClass(self.calendarContainer, \"rightMost\", rightMost);\r\n\r\n\t\tif (self.config.static) return;\r\n\r\n\t\tself.calendarContainer.style.top = top + \"px\";\r\n\r\n\t\tif (!rightMost) {\r\n\t\t\tself.calendarContainer.style.left = left + \"px\";\r\n\t\t\tself.calendarContainer.style.right = \"auto\";\r\n\t\t} else {\r\n\t\t\tself.calendarContainer.style.left = \"auto\";\r\n\t\t\tself.calendarContainer.style.right = right + \"px\";\r\n\t\t}\r\n\t}\r\n\r\n\tfunction redraw() {\r\n\t\tif (self.config.noCalendar || self.isMobile) return;\r\n\r\n\t\tbuildWeekdays();\r\n\t\tupdateNavigationCurrentMonth();\r\n\t\tbuildDays();\r\n\t}\r\n\r\n\tfunction selectDate(e) {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\r\n\t\tif (self.config.allowInput && e.key === \"Enter\" && e.target === (self.altInput || self.input)) {\r\n\t\t\tself.setDate((self.altInput || self.input).value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);\r\n\t\t\treturn e.target.blur();\r\n\t\t}\r\n\r\n\t\tif (!e.target.classList.contains(\"flatpickr-day\") || e.target.classList.contains(\"disabled\") || e.target.classList.contains(\"notAllowed\")) return;\r\n\r\n\t\tvar selectedDate = self.latestSelectedDateObj = new Date(e.target.dateObj.getTime());\r\n\r\n\t\tself.selectedDateElem = e.target;\r\n\r\n\t\tif (self.config.mode === \"single\") self.selectedDates = [selectedDate];else if (self.config.mode === \"multiple\") {\r\n\t\t\tvar selectedIndex = isDateSelected(selectedDate);\r\n\t\t\tif (selectedIndex) self.selectedDates.splice(selectedIndex, 1);else self.selectedDates.push(selectedDate);\r\n\t\t} else if (self.config.mode === \"range\") {\r\n\t\t\tif (self.selectedDates.length === 2) self.clear();\r\n\r\n\t\t\tself.selectedDates.push(selectedDate);\r\n\r\n\t\t\t// unless selecting same date twice, sort ascendingly\r\n\t\t\tif (compareDates(selectedDate, self.selectedDates[0], true) !== 0) self.selectedDates.sort(function (a, b) {\r\n\t\t\t\treturn a.getTime() - b.getTime();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsetHoursFromInputs();\r\n\r\n\t\tif (selectedDate.getMonth() !== self.currentMonth && self.config.mode !== \"range\") {\r\n\t\t\tvar isNewYear = self.currentYear !== selectedDate.getFullYear();\r\n\t\t\tself.currentYear = selectedDate.getFullYear();\r\n\t\t\tself.currentMonth = selectedDate.getMonth();\r\n\r\n\t\t\tif (isNewYear) triggerEvent(\"YearChange\");\r\n\r\n\t\t\ttriggerEvent(\"MonthChange\");\r\n\t\t}\r\n\r\n\t\tbuildDays();\r\n\r\n\t\tif (self.minDateHasTime && self.config.enableTime && compareDates(selectedDate, self.config.minDate) === 0) setHoursFromDate(self.config.minDate);\r\n\r\n\t\tupdateValue();\r\n\r\n\t\tsetTimeout(function () {\r\n\t\t\treturn self.showTimeInput = true;\r\n\t\t}, 50);\r\n\r\n\t\tif (self.config.mode === \"range\") {\r\n\t\t\tif (self.selectedDates.length === 1) {\r\n\t\t\t\tonMouseOver(e);\r\n\r\n\t\t\t\tself._hidePrevMonthArrow = self._hidePrevMonthArrow || self.minRangeDate > self.days.childNodes[0].dateObj;\r\n\r\n\t\t\t\tself._hideNextMonthArrow = self._hideNextMonthArrow || self.maxRangeDate < new Date(self.currentYear, self.currentMonth + 1, 1);\r\n\t\t\t} else {\r\n\t\t\t\tupdateNavigationCurrentMonth();\r\n\t\t\t\tself.close();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (self.config.enableTime) setTimeout(function () {\r\n\t\t\tself.hourElement.select();\r\n\t\t}, 451);\r\n\r\n\t\tif (self.config.mode === \"single\" && !self.config.enableTime) self.close();\r\n\r\n\t\ttriggerEvent(\"Change\");\r\n\t}\r\n\r\n\tfunction set(option, value) {\r\n\t\tself.config[option] = value;\r\n\t\tself.redraw();\r\n\t\tjumpToDate();\r\n\t}\r\n\r\n\tfunction setSelectedDate(inputDate, format) {\r\n\t\tif (Array.isArray(inputDate)) self.selectedDates = inputDate.map(function (d) {\r\n\t\t\treturn self.parseDate(d, false, format);\r\n\t\t});else if (inputDate instanceof Date || !isNaN(inputDate)) self.selectedDates = [self.parseDate(inputDate)];else if (inputDate && inputDate.substring) {\r\n\t\t\tswitch (self.config.mode) {\r\n\t\t\t\tcase \"single\":\r\n\t\t\t\t\tself.selectedDates = [self.parseDate(inputDate, false, format)];\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"multiple\":\r\n\t\t\t\t\tself.selectedDates = inputDate.split(\"; \").map(function (date) {\r\n\t\t\t\t\t\treturn self.parseDate(date, false, format);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"range\":\r\n\t\t\t\t\tself.selectedDates = inputDate.split(self.l10n.rangeSeparator).map(function (date) {\r\n\t\t\t\t\t\treturn self.parseDate(date, false, format);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tself.selectedDates = self.selectedDates.filter(function (d) {\r\n\t\t\treturn d instanceof Date && isEnabled(d, false);\r\n\t\t});\r\n\r\n\t\tself.selectedDates.sort(function (a, b) {\r\n\t\t\treturn a.getTime() - b.getTime();\r\n\t\t});\r\n\t}\r\n\r\n\tfunction setDate(date, triggerChange, format) {\r\n\t\tif (!date) return self.clear();\r\n\r\n\t\tsetSelectedDate(date, format);\r\n\r\n\t\tself.showTimeInput = self.selectedDates.length > 0;\r\n\t\tself.latestSelectedDateObj = self.selectedDates[0];\r\n\r\n\t\tself.redraw();\r\n\t\tjumpToDate();\r\n\r\n\t\tsetHoursFromDate();\r\n\t\tupdateValue();\r\n\r\n\t\tif (triggerChange) triggerEvent(\"Change\");\r\n\t}\r\n\r\n\tfunction setupDates() {\r\n\t\tfunction parseDateRules(arr) {\r\n\t\t\tfor (var i = arr.length; i--;) {\r\n\t\t\t\tif (typeof arr[i] === \"string\" || +arr[i]) arr[i] = self.parseDate(arr[i], true);else if (arr[i] && arr[i].from && arr[i].to) {\r\n\t\t\t\t\tarr[i].from = self.parseDate(arr[i].from);\r\n\t\t\t\t\tarr[i].to = self.parseDate(arr[i].to);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn arr.filter(function (x) {\r\n\t\t\t\treturn x;\r\n\t\t\t}); // remove falsy values\r\n\t\t}\r\n\r\n\t\tself.selectedDates = [];\r\n\t\tself.now = new Date();\r\n\r\n\t\tif (self.config.disable.length) self.config.disable = parseDateRules(self.config.disable);\r\n\r\n\t\tif (self.config.enable.length) self.config.enable = parseDateRules(self.config.enable);\r\n\r\n\t\tsetSelectedDate(self.config.defaultDate || self.input.value);\r\n\r\n\t\tvar initialDate = self.selectedDates.length ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now ? self.config.maxDate : self.now;\r\n\r\n\t\tself.currentYear = initialDate.getFullYear();\r\n\t\tself.currentMonth = initialDate.getMonth();\r\n\r\n\t\tif (self.selectedDates.length) self.latestSelectedDateObj = self.selectedDates[0];\r\n\r\n\t\tself.minDateHasTime = self.config.minDate && (self.config.minDate.getHours() || self.config.minDate.getMinutes() || self.config.minDate.getSeconds());\r\n\r\n\t\tself.maxDateHasTime = self.config.maxDate && (self.config.maxDate.getHours() || self.config.maxDate.getMinutes() || self.config.maxDate.getSeconds());\r\n\r\n\t\tObject.defineProperty(self, \"latestSelectedDateObj\", {\r\n\t\t\tget: function get() {\r\n\t\t\t\treturn self._selectedDateObj || self.selectedDates[self.selectedDates.length - 1] || null;\r\n\t\t\t},\r\n\t\t\tset: function set(date) {\r\n\t\t\t\tself._selectedDateObj = date;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (!self.isMobile) {\r\n\t\t\tObject.defineProperty(self, \"showTimeInput\", {\r\n\t\t\t\tget: function get() {\r\n\t\t\t\t\treturn self._showTimeInput;\r\n\t\t\t\t},\r\n\t\t\t\tset: function set(bool) {\r\n\t\t\t\t\tself._showTimeInput = bool;\r\n\t\t\t\t\tif (self.calendarContainer) toggleClass(self.calendarContainer, \"showTimeInput\", bool);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setupHelperFunctions() {\r\n\t\tself.utils = {\r\n\t\t\tduration: {\r\n\t\t\t\tDAY: 86400000\r\n\t\t\t},\r\n\t\t\tgetDaysinMonth: function getDaysinMonth(month, yr) {\r\n\t\t\t\tmonth = typeof month === \"undefined\" ? self.currentMonth : month;\r\n\r\n\t\t\t\tyr = typeof yr === \"undefined\" ? self.currentYear : yr;\r\n\r\n\t\t\t\tif (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0)) return 29;\r\n\r\n\t\t\t\treturn self.l10n.daysInMonth[month];\r\n\t\t\t},\r\n\t\t\tmonthToStr: function monthToStr(monthNumber, shorthand) {\r\n\t\t\t\tshorthand = typeof shorthand === \"undefined\" ? self.config.shorthandCurrentMonth : shorthand;\r\n\r\n\t\t\t\treturn self.l10n.months[(shorthand ? \"short\" : \"long\") + \"hand\"][monthNumber];\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\tfunction setupFormats() {\r\n\t\t[\"D\", \"F\", \"J\", \"M\", \"W\", \"l\"].forEach(function (f) {\r\n\t\t\tself.formats[f] = Flatpickr.prototype.formats[f].bind(self);\r\n\t\t});\r\n\r\n\t\tself.revFormat.F = Flatpickr.prototype.revFormat.F.bind(self);\r\n\t\tself.revFormat.M = Flatpickr.prototype.revFormat.M.bind(self);\r\n\t}\r\n\r\n\tfunction setupInputs() {\r\n\t\tself.input = self.config.wrap ? self.element.querySelector(\"[data-input]\") : self.element;\r\n\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!self.input) return console.warn(\"Error: invalid input element specified\", self.input);\r\n\r\n\t\tself.input._type = self.input.type;\r\n\t\tself.input.type = \"text\";\r\n\t\tself.input.classList.add(\"flatpickr-input\");\r\n\r\n\t\tif (self.config.altInput) {\r\n\t\t\t// replicate self.element\r\n\t\t\tself.altInput = createElement(self.input.nodeName, self.input.className + \" \" + self.config.altInputClass);\r\n\t\t\tself.altInput.placeholder = self.input.placeholder;\r\n\t\t\tself.altInput.type = \"text\";\r\n\t\t\tself.input.type = \"hidden\";\r\n\r\n\t\t\tif (!self.config.static && self.input.parentNode) self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);\r\n\t\t}\r\n\r\n\t\tif (!self.config.allowInput) (self.altInput || self.input).setAttribute(\"readonly\", \"readonly\");\r\n\t}\r\n\r\n\tfunction setupMobile() {\r\n\t\tvar inputType = self.config.enableTime ? self.config.noCalendar ? \"time\" : \"datetime-local\" : \"date\";\r\n\r\n\t\tself.mobileInput = createElement(\"input\", self.input.className + \" flatpickr-mobile\");\r\n\t\tself.mobileInput.step = \"any\";\r\n\t\tself.mobileInput.tabIndex = 1;\r\n\t\tself.mobileInput.type = inputType;\r\n\t\tself.mobileInput.disabled = self.input.disabled;\r\n\t\tself.mobileInput.placeholder = self.input.placeholder;\r\n\r\n\t\tself.mobileFormatStr = inputType === \"datetime-local\" ? \"Y-m-d\\\\TH:i:S\" : inputType === \"date\" ? \"Y-m-d\" : \"H:i:S\";\r\n\r\n\t\tif (self.selectedDates.length) {\r\n\t\t\tself.mobileInput.defaultValue = self.mobileInput.value = formatDate(self.mobileFormatStr, self.selectedDates[0]);\r\n\t\t}\r\n\r\n\t\tif (self.config.minDate) self.mobileInput.min = formatDate(\"Y-m-d\", self.config.minDate);\r\n\r\n\t\tif (self.config.maxDate) self.mobileInput.max = formatDate(\"Y-m-d\", self.config.maxDate);\r\n\r\n\t\tself.input.type = \"hidden\";\r\n\t\tif (self.config.altInput) self.altInput.type = \"hidden\";\r\n\r\n\t\ttry {\r\n\t\t\tself.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);\r\n\t\t} catch (e) {\r\n\t\t\t//\r\n\t\t}\r\n\r\n\t\tself.mobileInput.addEventListener(\"change\", function (e) {\r\n\t\t\tself.latestSelectedDateObj = self.parseDate(e.target.value);\r\n\t\t\tself.setDate(self.latestSelectedDateObj);\r\n\t\t\ttriggerEvent(\"Change\");\r\n\t\t\ttriggerEvent(\"Close\");\r\n\t\t});\r\n\t}\r\n\r\n\tfunction toggle() {\r\n\t\tif (self.isOpen) self.close();else self.open();\r\n\t}\r\n\r\n\tfunction triggerEvent(event, data) {\r\n\t\tvar hooks = self.config[\"on\" + event];\r\n\r\n\t\tif (hooks) {\r\n\t\t\tfor (var i = 0; hooks[i] && i < hooks.length; i++) {\r\n\t\t\t\thooks[i](self.selectedDates, self.input && self.input.value, self, data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (event === \"Change\") {\r\n\t\t\tif (typeof Event === \"function\" && Event.constructor) {\r\n\t\t\t\tself.input.dispatchEvent(new Event(\"change\", { \"bubbles\": true }));\r\n\r\n\t\t\t\t// many front-end frameworks bind to the input event\r\n\t\t\t\tself.input.dispatchEvent(new Event(\"input\", { \"bubbles\": true }));\r\n\t\t\t}\r\n\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\telse {\r\n\t\t\t\t\tif (window.document.createEvent !== undefined) return self.input.dispatchEvent(self.changeEvent);\r\n\r\n\t\t\t\t\tself.input.fireEvent(\"onchange\");\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isDateSelected(date) {\r\n\t\tfor (var i = 0; i < self.selectedDates.length; i++) {\r\n\t\t\tif (compareDates(self.selectedDates[i], date) === 0) return \"\" + i;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction isDateInRange(date) {\r\n\t\tif (self.config.mode !== \"range\" || self.selectedDates.length < 2) return false;\r\n\t\treturn compareDates(date, self.selectedDates[0]) >= 0 && compareDates(date, self.selectedDates[1]) <= 0;\r\n\t}\r\n\r\n\tfunction updateNavigationCurrentMonth() {\r\n\t\tif (self.config.noCalendar || self.isMobile || !self.monthNav) return;\r\n\r\n\t\tself.currentMonthElement.textContent = self.utils.monthToStr(self.currentMonth) + \" \";\r\n\t\tself.currentYearElement.value = self.currentYear;\r\n\r\n\t\tself._hidePrevMonthArrow = self.config.minDate && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());\r\n\r\n\t\tself._hideNextMonthArrow = self.config.maxDate && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());\r\n\t}\r\n\r\n\tfunction updateValue() {\r\n\t\tif (!self.selectedDates.length) return self.clear();\r\n\r\n\t\tif (self.isMobile) {\r\n\t\t\tself.mobileInput.value = self.selectedDates.length ? formatDate(self.mobileFormatStr, self.latestSelectedDateObj) : \"\";\r\n\t\t}\r\n\r\n\t\tvar joinChar = self.config.mode !== \"range\" ? \"; \" : self.l10n.rangeSeparator;\r\n\r\n\t\tself.input.value = self.selectedDates.map(function (dObj) {\r\n\t\t\treturn formatDate(self.config.dateFormat, dObj);\r\n\t\t}).join(joinChar);\r\n\r\n\t\tif (self.config.altInput) {\r\n\t\t\tself.altInput.value = self.selectedDates.map(function (dObj) {\r\n\t\t\t\treturn formatDate(self.config.altFormat, dObj);\r\n\t\t\t}).join(joinChar);\r\n\t\t}\r\n\r\n\t\ttriggerEvent(\"ValueUpdate\");\r\n\t}\r\n\r\n\tfunction yearScroll(e) {\r\n\t\te.preventDefault();\r\n\r\n\t\tvar delta = Math.max(-1, Math.min(1, e.wheelDelta || -e.deltaY)),\r\n\t\t    newYear = parseInt(e.target.value, 10) + delta;\r\n\r\n\t\tchangeYear(newYear);\r\n\t\te.target.value = self.currentYear;\r\n\t}\r\n\r\n\tfunction createElement(tag, className, content) {\r\n\t\tvar e = window.document.createElement(tag);\r\n\t\tclassName = className || \"\";\r\n\t\tcontent = content || \"\";\r\n\r\n\t\te.className = className;\r\n\r\n\t\tif (content) e.textContent = content;\r\n\r\n\t\treturn e;\r\n\t}\r\n\r\n\tfunction arrayify(obj) {\r\n\t\tif (Array.isArray(obj)) return obj;\r\n\t\treturn [obj];\r\n\t}\r\n\r\n\tfunction toggleClass(elem, className, bool) {\r\n\t\tif (bool) return elem.classList.add(className);\r\n\t\telem.classList.remove(className);\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\tfunction debounce(func, wait, immediate) {\r\n\t\tvar timeout = void 0;\r\n\t\treturn function () {\r\n\t\t\tvar context = this,\r\n\t\t\t    args = arguments;\r\n\t\t\tclearTimeout(timeout);\r\n\t\t\ttimeout = setTimeout(function () {\r\n\t\t\t\ttimeout = null;\r\n\t\t\t\tif (!immediate) func.apply(context, args);\r\n\t\t\t}, wait);\r\n\t\t\tif (immediate && !timeout) func.apply(context, args);\r\n\t\t};\r\n\t}\r\n\r\n\tfunction compareDates(date1, date2, timeless) {\r\n\t\tif (!(date1 instanceof Date) || !(date2 instanceof Date)) return false;\r\n\r\n\t\tif (timeless !== false) {\r\n\t\t\treturn new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);\r\n\t\t}\r\n\r\n\t\treturn date1.getTime() - date2.getTime();\r\n\t}\r\n\r\n\tfunction timeWrapper(e) {\r\n\t\te.preventDefault();\r\n\r\n\t\tvar isKeyDown = e.type === \"keydown\",\r\n\t\t    isWheel = e.type === \"wheel\",\r\n\t\t    isIncrement = e.type === \"increment\",\r\n\t\t    input = e.target;\r\n\r\n\t\tif (e.type !== \"input\" && !isKeyDown && (e.target.value || e.target.textContent).length >= 2 // typed two digits\r\n\t\t) {\r\n\t\t\t\te.target.focus();\r\n\t\t\t\te.target.blur();\r\n\t\t\t}\r\n\r\n\t\tif (self.amPM && e.target === self.amPM) return e.target.textContent = [\"AM\", \"PM\"][e.target.textContent === \"AM\" | 0];\r\n\r\n\t\tvar min = Number(input.min),\r\n\t\t    max = Number(input.max),\r\n\t\t    step = Number(input.step),\r\n\t\t    curValue = parseInt(input.value, 10),\r\n\t\t    delta = e.delta || (!isKeyDown ? Math.max(-1, Math.min(1, e.wheelDelta || -e.deltaY)) || 0 : e.which === 38 ? 1 : -1);\r\n\r\n\t\tvar newValue = curValue + step * delta;\r\n\r\n\t\tif (typeof input.value !== \"undefined\" && input.value.length === 2) {\r\n\t\t\tvar isHourElem = input === self.hourElement,\r\n\t\t\t    isMinuteElem = input === self.minuteElement;\r\n\r\n\t\t\tif (newValue < min) {\r\n\t\t\t\tnewValue = max + newValue + !isHourElem + (isHourElem && !self.amPM);\r\n\r\n\t\t\t\tif (isMinuteElem) incrementNumInput(null, -1, self.hourElement);\r\n\t\t\t} else if (newValue > max) {\r\n\t\t\t\tnewValue = input === self.hourElement ? newValue - max - !self.amPM : min;\r\n\r\n\t\t\t\tif (isMinuteElem) incrementNumInput(null, 1, self.hourElement);\r\n\t\t\t}\r\n\r\n\t\t\tif (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) self.amPM.textContent = self.amPM.textContent === \"PM\" ? \"AM\" : \"PM\";\r\n\r\n\t\t\tinput.value = self.pad(newValue);\r\n\t\t}\r\n\t}\r\n\r\n\tinit();\r\n\treturn self;\r\n}\r\n\r\n/* istanbul ignore next */\r\nFlatpickr.defaultConfig = {\r\n\r\n\tmode: \"single\",\r\n\r\n\tposition: \"top\",\r\n\r\n\t/* if true, dates will be parsed, formatted, and displayed in UTC.\r\n preloading date strings w/ timezones is recommended but not necessary */\r\n\tutc: false,\r\n\r\n\t// wrap: see https://chmln.github.io/flatpickr/#strap\r\n\twrap: false,\r\n\r\n\t// enables week numbers\r\n\tweekNumbers: false,\r\n\r\n\t// allow manual datetime input\r\n\tallowInput: false,\r\n\r\n\t/*\r\n \tclicking on input opens the date(time)picker.\r\n \tdisable if you wish to open the calendar manually with .open()\r\n */\r\n\tclickOpens: true,\r\n\r\n\t// display time picker in 24 hour mode\r\n\ttime_24hr: false,\r\n\r\n\t// enables the time picker functionality\r\n\tenableTime: false,\r\n\r\n\t// noCalendar: true will hide the calendar. use for a time picker along w/ enableTime\r\n\tnoCalendar: false,\r\n\r\n\t// more date format chars at https://chmln.github.io/flatpickr/#dateformat\r\n\tdateFormat: \"Y-m-d\",\r\n\r\n\t// altInput - see https://chmln.github.io/flatpickr/#altinput\r\n\taltInput: false,\r\n\r\n\t// the created altInput element will have this class.\r\n\taltInputClass: \"flatpickr-input form-control input\",\r\n\r\n\t// same as dateFormat, but for altInput\r\n\taltFormat: \"F j, Y\", // defaults to e.g. June 10, 2016\r\n\r\n\t// defaultDate - either a datestring or a date object. used for datetimepicker\"s initial value\r\n\tdefaultDate: null,\r\n\r\n\t// the minimum date that user can pick (inclusive)\r\n\tminDate: null,\r\n\r\n\t// the maximum date that user can pick (inclusive)\r\n\tmaxDate: null,\r\n\r\n\t// dateparser that transforms a given string to a date object\r\n\tparseDate: null,\r\n\r\n\t// dateformatter that transforms a given date object to a string, according to passed format\r\n\tformatDate: null,\r\n\r\n\tgetWeek: function getWeek(givenDate) {\r\n\t\tvar date = new Date(givenDate.getTime());\r\n\t\tdate.setHours(0, 0, 0, 0);\r\n\r\n\t\t// Thursday in current week decides the year.\r\n\t\tdate.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);\r\n\t\t// January 4 is always in week 1.\r\n\t\tvar week1 = new Date(date.getFullYear(), 0, 4);\r\n\t\t// Adjust to Thursday in week 1 and count number of weeks from date to week1.\r\n\t\treturn 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);\r\n\t},\r\n\r\n\t// see https://chmln.github.io/flatpickr/#disable\r\n\tenable: [],\r\n\r\n\t// see https://chmln.github.io/flatpickr/#disable\r\n\tdisable: [],\r\n\r\n\t// display the short version of month names - e.g. Sep instead of September\r\n\tshorthandCurrentMonth: false,\r\n\r\n\t// displays calendar inline. see https://chmln.github.io/flatpickr/#inline-calendar\r\n\tinline: false,\r\n\r\n\t// position calendar inside wrapper and next to the input element\r\n\t// leave at false unless you know what you\"re doing\r\n\tstatic: false,\r\n\r\n\t// DOM node to append the calendar to in *static* mode\r\n\tappendTo: null,\r\n\r\n\t// code for previous/next icons. this is where you put your custom icon code e.g. fontawesome\r\n\tprevArrow: \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>\",\r\n\tnextArrow: \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>\",\r\n\r\n\t// enables seconds in the time picker\r\n\tenableSeconds: false,\r\n\r\n\t// step size used when scrolling/incrementing the hour element\r\n\thourIncrement: 1,\r\n\r\n\t// step size used when scrolling/incrementing the minute element\r\n\tminuteIncrement: 5,\r\n\r\n\t// initial value in the hour element\r\n\tdefaultHour: 12,\r\n\r\n\t// initial value in the minute element\r\n\tdefaultMinute: 0,\r\n\r\n\t// disable native mobile datetime input support\r\n\tdisableMobile: false,\r\n\r\n\t// default locale\r\n\tlocale: \"default\",\r\n\r\n\tplugins: [],\r\n\r\n\t// called every time calendar is closed\r\n\tonClose: [], // function (dateObj, dateStr) {}\r\n\r\n\t// onChange callback when user selects a date or time\r\n\tonChange: [], // function (dateObj, dateStr) {}\r\n\r\n\t// called for every day element\r\n\tonDayCreate: [],\r\n\r\n\t// called every time the month is changed\r\n\tonMonthChange: [],\r\n\r\n\t// called every time calendar is opened\r\n\tonOpen: [], // function (dateObj, dateStr) {}\r\n\r\n\t// called after the configuration has been parsed\r\n\tonParseConfig: [],\r\n\r\n\t// called after calendar is ready\r\n\tonReady: [], // function (dateObj, dateStr) {}\r\n\r\n\t// called after input value updated\r\n\tonValueUpdate: [],\r\n\r\n\t// called every time the year is changed\r\n\tonYearChange: [],\r\n\r\n\tonKeyDown: []\r\n};\r\n\r\n/* istanbul ignore next */\r\nFlatpickr.l10ns = {\r\n\ten: {\r\n\t\tweekdays: {\r\n\t\t\tshorthand: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n\t\t\tlonghand: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n\t\t},\r\n\t\tmonths: {\r\n\t\t\tshorthand: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\r\n\t\t\tlonghand: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n\t\t},\r\n\t\tdaysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n\t\tfirstDayOfWeek: 0,\r\n\t\tordinal: function ordinal(nth) {\r\n\t\t\tvar s = nth % 100;\r\n\t\t\tif (s > 3 && s < 21) return \"th\";\r\n\t\t\tswitch (s % 10) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn \"st\";\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn \"nd\";\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn \"rd\";\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn \"th\";\r\n\t\t\t}\r\n\t\t},\r\n\t\trangeSeparator: \" to \",\r\n\t\tweekAbbreviation: \"Wk\",\r\n\t\tscrollTitle: \"Scroll to increment\",\r\n\t\ttoggleTitle: \"Click to toggle\"\r\n\t}\r\n};\r\n\r\nFlatpickr.l10ns.default = Object.create(Flatpickr.l10ns.en);\r\nFlatpickr.localize = function (l10n) {\r\n\treturn _extends(Flatpickr.l10ns.default, l10n || {});\r\n};\r\nFlatpickr.setDefaults = function (config) {\r\n\treturn _extends(Flatpickr.defaultConfig, config || {});\r\n};\r\n\r\nFlatpickr.prototype = {\r\n\tformats: {\r\n\t\t// get the date in UTC\r\n\t\tZ: function Z(date) {\r\n\t\t\treturn date.toISOString();\r\n\t\t},\r\n\r\n\t\t// weekday name, short, e.g. Thu\r\n\t\tD: function D(date) {\r\n\t\t\treturn this.l10n.weekdays.shorthand[this.formats.w(date)];\r\n\t\t},\r\n\r\n\t\t// full month name e.g. January\r\n\t\tF: function F(date) {\r\n\t\t\treturn this.utils.monthToStr(this.formats.n(date) - 1, false);\r\n\t\t},\r\n\r\n\t\t// hours with leading zero e.g. 03\r\n\t\tH: function H(date) {\r\n\t\t\treturn Flatpickr.prototype.pad(date.getHours());\r\n\t\t},\r\n\r\n\t\t// day (1-30) with ordinal suffix e.g. 1st, 2nd\r\n\t\tJ: function J(date) {\r\n\t\t\treturn date.getDate() + this.l10n.ordinal(date.getDate());\r\n\t\t},\r\n\r\n\t\t// AM/PM\r\n\t\tK: function K(date) {\r\n\t\t\treturn date.getHours() > 11 ? \"PM\" : \"AM\";\r\n\t\t},\r\n\r\n\t\t// shorthand month e.g. Jan, Sep, Oct, etc\r\n\t\tM: function M(date) {\r\n\t\t\treturn this.utils.monthToStr(date.getMonth(), true);\r\n\t\t},\r\n\r\n\t\t// seconds 00-59\r\n\t\tS: function S(date) {\r\n\t\t\treturn Flatpickr.prototype.pad(date.getSeconds());\r\n\t\t},\r\n\r\n\t\t// unix timestamp\r\n\t\tU: function U(date) {\r\n\t\t\treturn date.getTime() / 1000;\r\n\t\t},\r\n\r\n\t\tW: function W(date) {\r\n\t\t\treturn this.config.getWeek(date);\r\n\t\t},\r\n\r\n\t\t// full year e.g. 2016\r\n\t\tY: function Y(date) {\r\n\t\t\treturn date.getFullYear();\r\n\t\t},\r\n\r\n\t\t// day in month, padded (01-30)\r\n\t\td: function d(date) {\r\n\t\t\treturn Flatpickr.prototype.pad(date.getDate());\r\n\t\t},\r\n\r\n\t\t// hour from 1-12 (am/pm)\r\n\t\th: function h(date) {\r\n\t\t\treturn date.getHours() % 12 ? date.getHours() % 12 : 12;\r\n\t\t},\r\n\r\n\t\t// minutes, padded with leading zero e.g. 09\r\n\t\ti: function i(date) {\r\n\t\t\treturn Flatpickr.prototype.pad(date.getMinutes());\r\n\t\t},\r\n\r\n\t\t// day in month (1-30)\r\n\t\tj: function j(date) {\r\n\t\t\treturn date.getDate();\r\n\t\t},\r\n\r\n\t\t// weekday name, full, e.g. Thursday\r\n\t\tl: function l(date) {\r\n\t\t\treturn this.l10n.weekdays.longhand[date.getDay()];\r\n\t\t},\r\n\r\n\t\t// padded month number (01-12)\r\n\t\tm: function m(date) {\r\n\t\t\treturn Flatpickr.prototype.pad(date.getMonth() + 1);\r\n\t\t},\r\n\r\n\t\t// the month number (1-12)\r\n\t\tn: function n(date) {\r\n\t\t\treturn date.getMonth() + 1;\r\n\t\t},\r\n\r\n\t\t// seconds 0-59\r\n\t\ts: function s(date) {\r\n\t\t\treturn date.getSeconds();\r\n\t\t},\r\n\r\n\t\t// number of the day of the week\r\n\t\tw: function w(date) {\r\n\t\t\treturn date.getDay();\r\n\t\t},\r\n\r\n\t\t// last two digits of year e.g. 16 for 2016\r\n\t\ty: function y(date) {\r\n\t\t\treturn String(date.getFullYear()).substring(2);\r\n\t\t}\r\n\t},\r\n\r\n\trevFormat: {\r\n\t\tD: function D() {},\r\n\t\tF: function F(dateObj, monthName) {\r\n\t\t\tdateObj.setMonth(this.l10n.months.longhand.indexOf(monthName));\r\n\t\t},\r\n\t\tH: function H(dateObj, hour) {\r\n\t\t\treturn dateObj.setHours(parseFloat(hour));\r\n\t\t},\r\n\t\tJ: function J(dateObj, day) {\r\n\t\t\treturn dateObj.setDate(parseFloat(day));\r\n\t\t},\r\n\t\tK: function K(dateObj, amPM) {\r\n\t\t\tvar hours = dateObj.getHours();\r\n\r\n\t\t\tif (hours !== 12) dateObj.setHours(hours % 12 + 12 * /pm/i.test(amPM));\r\n\t\t},\r\n\t\tM: function M(dateObj, shortMonth) {\r\n\t\t\tdateObj.setMonth(this.l10n.months.shorthand.indexOf(shortMonth));\r\n\t\t},\r\n\t\tS: function S(dateObj, seconds) {\r\n\t\t\treturn dateObj.setSeconds(seconds);\r\n\t\t},\r\n\t\tW: function W() {},\r\n\t\tY: function Y(dateObj, year) {\r\n\t\t\treturn dateObj.setFullYear(year);\r\n\t\t},\r\n\t\tZ: function Z(dateObj, ISODate) {\r\n\t\t\treturn dateObj = new Date(ISODate);\r\n\t\t},\r\n\r\n\t\td: function d(dateObj, day) {\r\n\t\t\treturn dateObj.setDate(parseFloat(day));\r\n\t\t},\r\n\t\th: function h(dateObj, hour) {\r\n\t\t\treturn dateObj.setHours(parseFloat(hour));\r\n\t\t},\r\n\t\ti: function i(dateObj, minutes) {\r\n\t\t\treturn dateObj.setMinutes(parseFloat(minutes));\r\n\t\t},\r\n\t\tj: function j(dateObj, day) {\r\n\t\t\treturn dateObj.setDate(parseFloat(day));\r\n\t\t},\r\n\t\tl: function l() {},\r\n\t\tm: function m(dateObj, month) {\r\n\t\t\treturn dateObj.setMonth(parseFloat(month) - 1);\r\n\t\t},\r\n\t\tn: function n(dateObj, month) {\r\n\t\t\treturn dateObj.setMonth(parseFloat(month) - 1);\r\n\t\t},\r\n\t\ts: function s(dateObj, seconds) {\r\n\t\t\treturn dateObj.setSeconds(parseFloat(seconds));\r\n\t\t},\r\n\t\tw: function w() {},\r\n\t\ty: function y(dateObj, year) {\r\n\t\t\treturn dateObj.setFullYear(2000 + parseFloat(year));\r\n\t\t}\r\n\t},\r\n\r\n\ttokenRegex: {\r\n\t\tD: \"(\\\\w+)\",\r\n\t\tF: \"(\\\\w+)\",\r\n\t\tH: \"(\\\\d\\\\d|\\\\d)\",\r\n\t\tJ: \"(\\\\d\\\\d|\\\\d)\\\\w+\",\r\n\t\tK: \"(\\\\w+)\",\r\n\t\tM: \"(\\\\w+)\",\r\n\t\tS: \"(\\\\d\\\\d|\\\\d)\",\r\n\t\tY: \"(\\\\d{4})\",\r\n\t\tZ: \"(.+)\",\r\n\t\td: \"(\\\\d\\\\d|\\\\d)\",\r\n\t\th: \"(\\\\d\\\\d|\\\\d)\",\r\n\t\ti: \"(\\\\d\\\\d|\\\\d)\",\r\n\t\tj: \"(\\\\d\\\\d|\\\\d)\",\r\n\t\tl: \"(\\\\w+)\",\r\n\t\tm: \"(\\\\d\\\\d|\\\\d)\",\r\n\t\tn: \"(\\\\d\\\\d|\\\\d)\",\r\n\t\ts: \"(\\\\d\\\\d|\\\\d)\",\r\n\t\tw: \"(\\\\d\\\\d|\\\\d)\",\r\n\t\ty: \"(\\\\d{2})\"\r\n\t},\r\n\r\n\tpad: function pad(number) {\r\n\t\treturn (\"0\" + number).slice(-2);\r\n\t},\r\n\r\n\tparseDate: function parseDate(date, timeless, givenFormat) {\r\n\t\tif (!date) return null;\r\n\r\n\t\tvar date_orig = date;\r\n\r\n\t\tif (date.toFixed) // timestamp\r\n\t\t\tdate = new Date(date);else if (typeof date === \"string\") {\r\n\t\t\tvar format = typeof givenFormat === \"string\" ? givenFormat : this.config.dateFormat;\r\n\t\t\tdate = date.trim();\r\n\r\n\t\t\tif (date === \"today\") {\r\n\t\t\t\tdate = new Date();\r\n\t\t\t\ttimeless = true;\r\n\t\t\t} else if (this.config && this.config.parseDate) date = this.config.parseDate(date);else if (/Z$/.test(date) || /GMT$/.test(date)) // datestrings w/ timezone\r\n\t\t\t\tdate = new Date(date);else {\r\n\t\t\t\tvar parsedDate = this.config.noCalendar ? new Date(new Date().setHours(0, 0, 0, 0)) : new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0);\r\n\r\n\t\t\t\tvar matched = false;\r\n\r\n\t\t\t\tfor (var i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\r\n\t\t\t\t\tvar token = format[i];\r\n\t\t\t\t\tvar isBackSlash = token === \"\\\\\";\r\n\t\t\t\t\tvar escaped = format[i - 1] === \"\\\\\" || isBackSlash;\r\n\t\t\t\t\tif (this.tokenRegex[token] && !escaped) {\r\n\t\t\t\t\t\tregexStr += this.tokenRegex[token];\r\n\t\t\t\t\t\tvar match = new RegExp(regexStr).exec(date);\r\n\t\t\t\t\t\tif (match && (matched = true)) this.revFormat[token](parsedDate, match[++matchIndex]);\r\n\t\t\t\t\t} else if (!isBackSlash) regexStr += \".\"; // don't really care\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdate = matched ? parsedDate : null;\r\n\t\t\t}\r\n\t\t} else if (date instanceof Date) date = new Date(date.getTime()); // create a copy\r\n\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!(date instanceof Date)) {\r\n\t\t\tconsole.warn(\"flatpickr: invalid date \" + date_orig);\r\n\t\t\tconsole.info(this.element);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif (this.config && this.config.utc && !date.fp_isUTC) date = date.fp_toUTC();\r\n\r\n\t\tif (timeless === true) date.setHours(0, 0, 0, 0);\r\n\r\n\t\treturn date;\r\n\t}\r\n};\r\n\r\n/* istanbul ignore next */\r\nfunction _flatpickr(nodeList, config) {\r\n\tvar nodes = Array.prototype.slice.call(nodeList); // static list\r\n\tvar instances = [];\r\n\tfor (var i = 0; i < nodes.length; i++) {\r\n\t\ttry {\r\n\t\t\tnodes[i]._flatpickr = new Flatpickr(nodes[i], config || {});\r\n\t\t\tinstances.push(nodes[i]._flatpickr);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn(e, e.stack);\r\n\t\t}\r\n\t}\r\n\r\n\treturn instances.length === 1 ? instances[0] : instances;\r\n}\r\n\r\n/* istanbul ignore next */\r\nif (typeof HTMLElement !== \"undefined\") {\r\n\t// browser env\r\n\tHTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {\r\n\t\treturn _flatpickr(this, config);\r\n\t};\r\n\r\n\tHTMLElement.prototype.flatpickr = function (config) {\r\n\t\treturn _flatpickr([this], config);\r\n\t};\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction flatpickr(selector, config) {\r\n\treturn _flatpickr(window.document.querySelectorAll(selector), config);\r\n}\r\n\r\n/* istanbul ignore next */\r\nif (typeof jQuery !== \"undefined\") {\r\n\tjQuery.fn.flatpickr = function (config) {\r\n\t\treturn _flatpickr(this, config);\r\n\t};\r\n}\r\n\r\nDate.prototype.fp_incr = function (days) {\r\n\treturn new Date(this.getFullYear(), this.getMonth(), this.getDate() + parseInt(days, 10));\r\n};\r\n\r\nDate.prototype.fp_isUTC = false;\r\nDate.prototype.fp_toUTC = function () {\r\n\tvar newDate = new Date(this.getUTCFullYear(), this.getUTCMonth(), this.getUTCDate(), this.getUTCHours(), this.getUTCMinutes(), this.getUTCSeconds());\r\n\r\n\tnewDate.fp_isUTC = true;\r\n\treturn newDate;\r\n};\r\n\r\n// IE9 classList polyfill\r\n/* istanbul ignore next */\r\nif (!window.document.documentElement.classList && Object.defineProperty && typeof HTMLElement !== \"undefined\") {\r\n\tObject.defineProperty(HTMLElement.prototype, \"classList\", {\r\n\t\tget: function get() {\r\n\t\t\tvar self = this;\r\n\t\t\tfunction update(fn) {\r\n\t\t\t\treturn function (value) {\r\n\t\t\t\t\tvar classes = self.className.split(/\\s+/),\r\n\t\t\t\t\t    index = classes.indexOf(value);\r\n\r\n\t\t\t\t\tfn(classes, index, value);\r\n\t\t\t\t\tself.className = classes.join(\" \");\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tvar ret = {\r\n\t\t\t\tadd: update(function (classes, index, value) {\r\n\t\t\t\t\tif (!~index) classes.push(value);\r\n\t\t\t\t}),\r\n\r\n\t\t\t\tremove: update(function (classes, index) {\r\n\t\t\t\t\tif (~index) classes.splice(index, 1);\r\n\t\t\t\t}),\r\n\r\n\t\t\t\ttoggle: update(function (classes, index, value) {\r\n\t\t\t\t\tif (~index) classes.splice(index, 1);else classes.push(value);\r\n\t\t\t\t}),\r\n\r\n\t\t\t\tcontains: function contains(value) {\r\n\t\t\t\t\treturn !!~self.className.split(/\\s+/).indexOf(value);\r\n\t\t\t\t},\r\n\r\n\t\t\t\titem: function item(i) {\r\n\t\t\t\t\treturn self.className.split(/\\s+/)[i] || null;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tObject.defineProperty(ret, \"length\", {\r\n\t\t\t\tget: function get() {\r\n\t\t\t\t\treturn self.className.split(/\\s+/).length;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t});\r\n}\r\n\r\nif (typeof module !== \"undefined\") module.exports = Flatpickr;\r\n",
		"it/designfuture/flatpickr/library.js": "/*!\r\n * ${copyright}\r\n */\r\n\r\n/**\r\n * Initialization Code and shared classes of library it.designfuture.flatpickr.\r\n */\r\nsap.ui.define([\r\n\t'jquery.sap.global', \r\n\t'sap/ui/core/library' // library dependency\r\n\t],  function(jQuery, library) {\r\n\r\n\t\t\"use strict\";\r\n\r\n\t\t/**\r\n\t\t * Suite controls library.\r\n\t\t *\r\n\t\t * @namespace\r\n\t\t * @name it.designfuture.flatpickr\r\n\t\t * @author Emanuele Ricci <stermi@gmail.com>\r\n\t\t * @version ${version}\r\n\t\t * @public\r\n\t\t */\r\n\r\n\r\n\t\t// Include custom css\r\n\t\tsap.ui.getCore().includeLibraryTheme(\"it.designfuture.flatpickr\");\r\n\t\t\r\n\t\t// delegate further initialization of this library to the Core\r\n\t\tsap.ui.getCore().initLibrary({\r\n\t\t\tname : \"it.designfuture.flatpickr\",\r\n\t\t\tversion: \"${version}\",\r\n\t\t\tdependencies : [\"sap.ui.core\", \"sap.m\"],\r\n\t\t\ttypes: [],\r\n\t\t\tinterfaces: [],\r\n\t\t\tcontrols: [ \r\n\t\t\t\t\"it.designfuture.flatpickr.FlatDatePicker\"\r\n\t\t\t],\r\n\t\t\telements: []\r\n\t\t});\r\n\r\n\t\treturn it.designfuture.flatpickr;\r\n\r\n}, /* bExport= */ false);"
	}
});